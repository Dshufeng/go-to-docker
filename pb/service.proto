// Inspired from https://github.com/philips/grpc-gateway-example

syntax = "proto3";
package pb;

import "google/api/annotations.proto";

import "pb/moby/api.proto";

message EchoMessage {
 string value = 1;
}

service EchoService {
  rpc Echo(EchoMessage) returns (EchoMessage) {
    option (google.api.http) = {
      get: "/v1/echo/{value}"
    };
  }

  // Like 'docker pull' command
  //
  // Input/Output is a same protobuf/json object. For input:
  // {
  //   "name": "tomcat:8"
  // }
  rpc PullImage(DockerPullData) returns (DockerPullData) {
    option (google.api.http) = {
        post: "/v1/pull"
        body: "*"
    };
  }

  // Like 'docker run' command
  //
  // Input/Output is a same protobuf/json object. For input:
  // {
  //   "config":
  //     {
  //       "image": "nginx",
  //       "exposed_ports":
  //         {
  //           "value": "webui"
  //         }
  //     },
  //   "host_config":
  //     {
  //       "port_bindings":
  //         {
  //           "value":
  //             {
  //               "80":
  //                 {
  //                   "host_port": "80"
  //                 }
  //             }
  //         }
  //     },
  //   "network_config":
  //     {
  //     },
  //   "container_name": "nginx"
  // }
  // And returning information append this object for output:
  // {
  //   "state_code": 0,  // succeeded, otherwise none zero
  //   "state_message": "if failed, provide error information",
  //   "container_id": "regturned from docker engine"  
  // }
  rpc RunContainer(DockerRunData) returns (DockerRunData) {
    option (google.api.http) = {
        post: "/v1/containers"
        body: "*"
    };
  }

  // Run containers with same user namespace information
  //
  // Input/Output is a same protobuf/json object. For input:
  // {
  //   "name": "fighter and target"
  //   "namespace": "default"
  //   "metadata":
  //     {
  //       "categroy_name": "basic-web-security",
  //       "class_name": "http-protocol"
  //       "field_name": "http-method"
  //     },
  //   "provisionings": [
  //     list of DockerRunData type, see previous
  //   ]
  // }
  rpc ProvisionContainers(ProvisioningsData) returns (ProvisioningsData) {
    option (google.api.http) = {
        post: "/v1/provisions"
        body: "*"
    };
  }

  // Delete containers with same user namespace information
  //
  // Input/Output is a same protobuf/json object. For input:
  // {
  //   "name": "fighter and target"
  //   "namespace": "default"
  //   "metadata":
  //     {
  //       "categroy_name": "basic-web-security",
  //       "class_name": "http-protocol"
  //       "field_name": "http-method"
  //     },
  // }
  // And returning information append this object for output:
  // {
  //   "provisionings": [
  //     list of DockerRunData type, see previous
  //   ]
  // }
  rpc TerminationContainers(ProvisioningsData) returns (ProvisioningsData) {
    option (google.api.http) = {
        post: "/v1/terminations"
        body: "*"
    };
  }

}

message DockerRunData {
    moby.Config config = 1;
    moby.HostConfig host_config = 2;
    moby.NetworkingConfig network_config = 3;
    string container_name = 4;
    int32 state_code = 5;
    string state_message = 6;
    string container_id = 7;
}

message DockerPullData {
    string image = 1;
    int32 state_code = 2;
    string state_message = 3;
    string image_id = 4;
    string progress_report = 5;
}

message ProvisioningsData {
    message Metadata {
        string category_name = 1;
        string class_name = 2;
        string field_name = 3;
    }
    string name = 1;
    string namespace = 2;
    Metadata metadata = 3;
    repeated DockerRunData provisionings = 4;
}

message BatchProvisioningsData {
    repeated ProvisioningsData provisions = 1;
}

message ImageRegistryData {
    string id = 1;
    moby.ImageSummary registration = 2;
}

message ImageArchiveData {
    string id = 1;
    moby.ImageInspect inspection = 2;
}

message ImageCatalogData {
    string id = 1;
    string name = 2;
    string namespace = 3;
    string category = 4;
    string subject = 5;
    string image = 6;
    int32 state_code = 7;
    string state_message = 8;
}


// SearchResult describes a search result returned from a registry
// to see https://github.com/moby/moby/blob/master/api/types/registry/registry.go
message SearchResult {
	// StarCount indicates the number of stars this repository has
	int32 star_count = 1;
	// IsOfficial is true if the result is from an official repository.
	bool is_official = 2;
	// Name is the name of the repository
	string name = 3;
	// IsAutomated indicates whether the result is automated
	bool is_automated = 4;
	// Description is a textual description of the repository
	string description = 5;
}
