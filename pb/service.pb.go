// Code generated by protoc-gen-gogo.
// source: pb/service.proto
// DO NOT EDIT!

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pb/service.proto

	It has these top-level messages:
		EchoMessage
		InstrumentMetadata
		DockerRunData
		DockerPullData
		DockerProcessStatusReqResp
		DockerContainerInspection
		ProvisioningsData
		InstantiationData
		RegistryRepositoryData
		ImageRegistryData
		ImageArchiveData
		SearchResult
		DockerNetworkData
		DockerNetworkCreationReqResp
		BridgedNetworkingData
		EthernetSniffingData
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import moby "github.com/tangfeixiong/go-to-docker/pb/moby"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoMessage struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EchoMessage) Reset()                    { *m = EchoMessage{} }
func (m *EchoMessage) String() string            { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()               {}
func (*EchoMessage) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *EchoMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type InstrumentMetadata struct {
	CategoryName string `protobuf:"bytes,1,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
	ClassName    string `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	FieldName    string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (m *InstrumentMetadata) Reset()                    { *m = InstrumentMetadata{} }
func (m *InstrumentMetadata) String() string            { return proto.CompactTextString(m) }
func (*InstrumentMetadata) ProtoMessage()               {}
func (*InstrumentMetadata) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *InstrumentMetadata) GetCategoryName() string {
	if m != nil {
		return m.CategoryName
	}
	return ""
}

func (m *InstrumentMetadata) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *InstrumentMetadata) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

type DockerRunData struct {
	Config        *moby.Config           `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	HostConfig    *moby.HostConfig       `protobuf:"bytes,2,opt,name=host_config,json=hostConfig" json:"host_config,omitempty"`
	NetworkConfig *moby.NetworkingConfig `protobuf:"bytes,3,opt,name=network_config,json=networkConfig" json:"network_config,omitempty"`
	ContainerName string                 `protobuf:"bytes,4,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	StateCode     int32                  `protobuf:"varint,5,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage  string                 `protobuf:"bytes,6,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	ContainerId   string                 `protobuf:"bytes,7,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (m *DockerRunData) Reset()                    { *m = DockerRunData{} }
func (m *DockerRunData) String() string            { return proto.CompactTextString(m) }
func (*DockerRunData) ProtoMessage()               {}
func (*DockerRunData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *DockerRunData) GetConfig() *moby.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *DockerRunData) GetHostConfig() *moby.HostConfig {
	if m != nil {
		return m.HostConfig
	}
	return nil
}

func (m *DockerRunData) GetNetworkConfig() *moby.NetworkingConfig {
	if m != nil {
		return m.NetworkConfig
	}
	return nil
}

func (m *DockerRunData) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *DockerRunData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerRunData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *DockerRunData) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type DockerPullData struct {
	Image          string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	StateCode      int32  `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage   string `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	ImageId        string `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ProgressReport string `protobuf:"bytes,5,opt,name=progress_report,json=progressReport,proto3" json:"progress_report,omitempty"`
}

func (m *DockerPullData) Reset()                    { *m = DockerPullData{} }
func (m *DockerPullData) String() string            { return proto.CompactTextString(m) }
func (*DockerPullData) ProtoMessage()               {}
func (*DockerPullData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

func (m *DockerPullData) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DockerPullData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerPullData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *DockerPullData) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *DockerPullData) GetProgressReport() string {
	if m != nil {
		return m.ProgressReport
	}
	return ""
}

type DockerProcessStatusReqResp struct {
	Options      *moby.ContainerListOptions `protobuf:"bytes,1,opt,name=options" json:"options,omitempty"`
	Containers   []*moby.Container          `protobuf:"bytes,2,rep,name=containers" json:"containers,omitempty"`
	StateCode    int32                      `protobuf:"varint,3,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage string                     `protobuf:"bytes,4,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *DockerProcessStatusReqResp) Reset()         { *m = DockerProcessStatusReqResp{} }
func (m *DockerProcessStatusReqResp) String() string { return proto.CompactTextString(m) }
func (*DockerProcessStatusReqResp) ProtoMessage()    {}
func (*DockerProcessStatusReqResp) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{4}
}

func (m *DockerProcessStatusReqResp) GetOptions() *moby.ContainerListOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *DockerProcessStatusReqResp) GetContainers() []*moby.Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *DockerProcessStatusReqResp) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerProcessStatusReqResp) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type DockerContainerInspection struct {
	ContainerInfo *moby.ContainerJSON `protobuf:"bytes,1,opt,name=container_info,json=containerInfo" json:"container_info,omitempty"`
	StateCode     int32               `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage  string              `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *DockerContainerInspection) Reset()                    { *m = DockerContainerInspection{} }
func (m *DockerContainerInspection) String() string            { return proto.CompactTextString(m) }
func (*DockerContainerInspection) ProtoMessage()               {}
func (*DockerContainerInspection) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{5} }

func (m *DockerContainerInspection) GetContainerInfo() *moby.ContainerJSON {
	if m != nil {
		return m.ContainerInfo
	}
	return nil
}

func (m *DockerContainerInspection) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerContainerInspection) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type ProvisioningsData struct {
	Name          string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                      `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Metadata      *ProvisioningsData_Metadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	Provisionings []*DockerRunData            `protobuf:"bytes,4,rep,name=provisionings" json:"provisionings,omitempty"`
}

func (m *ProvisioningsData) Reset()                    { *m = ProvisioningsData{} }
func (m *ProvisioningsData) String() string            { return proto.CompactTextString(m) }
func (*ProvisioningsData) ProtoMessage()               {}
func (*ProvisioningsData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{6} }

func (m *ProvisioningsData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProvisioningsData) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProvisioningsData) GetMetadata() *ProvisioningsData_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProvisioningsData) GetProvisionings() []*DockerRunData {
	if m != nil {
		return m.Provisionings
	}
	return nil
}

type ProvisioningsData_Metadata struct {
	CategoryName string `protobuf:"bytes,1,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
	ClassName    string `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	FieldName    string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (m *ProvisioningsData_Metadata) Reset()         { *m = ProvisioningsData_Metadata{} }
func (m *ProvisioningsData_Metadata) String() string { return proto.CompactTextString(m) }
func (*ProvisioningsData_Metadata) ProtoMessage()    {}
func (*ProvisioningsData_Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{6, 0}
}

func (m *ProvisioningsData_Metadata) GetCategoryName() string {
	if m != nil {
		return m.CategoryName
	}
	return ""
}

func (m *ProvisioningsData_Metadata) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *ProvisioningsData_Metadata) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

type InstantiationData struct {
	Name          string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Metadata      *InstrumentMetadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	Instantiation []*moby.Container   `protobuf:"bytes,4,rep,name=instantiation" json:"instantiation,omitempty"`
	StateCode     int32               `protobuf:"varint,5,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage  string              `protobuf:"bytes,6,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *InstantiationData) Reset()                    { *m = InstantiationData{} }
func (m *InstantiationData) String() string            { return proto.CompactTextString(m) }
func (*InstantiationData) ProtoMessage()               {}
func (*InstantiationData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{7} }

func (m *InstantiationData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstantiationData) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *InstantiationData) GetMetadata() *InstrumentMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *InstantiationData) GetInstantiation() []*moby.Container {
	if m != nil {
		return m.Instantiation
	}
	return nil
}

func (m *InstantiationData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *InstantiationData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type RegistryRepositoryData struct {
	Registries   []*RegistryRepositoryData_Registry `protobuf:"bytes,1,rep,name=registries" json:"registries,omitempty"`
	StateCode    int32                              `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage string                             `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *RegistryRepositoryData) Reset()                    { *m = RegistryRepositoryData{} }
func (m *RegistryRepositoryData) String() string            { return proto.CompactTextString(m) }
func (*RegistryRepositoryData) ProtoMessage()               {}
func (*RegistryRepositoryData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{8} }

func (m *RegistryRepositoryData) GetRegistries() []*RegistryRepositoryData_Registry {
	if m != nil {
		return m.Registries
	}
	return nil
}

func (m *RegistryRepositoryData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *RegistryRepositoryData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type RegistryRepositoryData_Tag struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RegistryRepositoryData_Tag) Reset()         { *m = RegistryRepositoryData_Tag{} }
func (m *RegistryRepositoryData_Tag) String() string { return proto.CompactTextString(m) }
func (*RegistryRepositoryData_Tag) ProtoMessage()    {}
func (*RegistryRepositoryData_Tag) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{8, 0}
}

func (m *RegistryRepositoryData_Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RegistryRepositoryData_Catalog struct {
	Name string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags []*RegistryRepositoryData_Tag `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *RegistryRepositoryData_Catalog) Reset()         { *m = RegistryRepositoryData_Catalog{} }
func (m *RegistryRepositoryData_Catalog) String() string { return proto.CompactTextString(m) }
func (*RegistryRepositoryData_Catalog) ProtoMessage()    {}
func (*RegistryRepositoryData_Catalog) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{8, 1}
}

func (m *RegistryRepositoryData_Catalog) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegistryRepositoryData_Catalog) GetTags() []*RegistryRepositoryData_Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type RegistryRepositoryData_Registry struct {
	Name        string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Catalogs    []*RegistryRepositoryData_Catalog `protobuf:"bytes,2,rep,name=catalogs" json:"catalogs,omitempty"`
	TlsDisabled bool                              `protobuf:"varint,3,opt,name=tls_disabled,json=tlsDisabled,proto3" json:"tls_disabled,omitempty"`
}

func (m *RegistryRepositoryData_Registry) Reset()         { *m = RegistryRepositoryData_Registry{} }
func (m *RegistryRepositoryData_Registry) String() string { return proto.CompactTextString(m) }
func (*RegistryRepositoryData_Registry) ProtoMessage()    {}
func (*RegistryRepositoryData_Registry) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{8, 2}
}

func (m *RegistryRepositoryData_Registry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegistryRepositoryData_Registry) GetCatalogs() []*RegistryRepositoryData_Catalog {
	if m != nil {
		return m.Catalogs
	}
	return nil
}

func (m *RegistryRepositoryData_Registry) GetTlsDisabled() bool {
	if m != nil {
		return m.TlsDisabled
	}
	return false
}

type ImageRegistryData struct {
	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Registration *moby.ImageSummary `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
}

func (m *ImageRegistryData) Reset()                    { *m = ImageRegistryData{} }
func (m *ImageRegistryData) String() string            { return proto.CompactTextString(m) }
func (*ImageRegistryData) ProtoMessage()               {}
func (*ImageRegistryData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{9} }

func (m *ImageRegistryData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageRegistryData) GetRegistration() *moby.ImageSummary {
	if m != nil {
		return m.Registration
	}
	return nil
}

type ImageArchiveData struct {
	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Inspection *moby.ImageInspect `protobuf:"bytes,2,opt,name=inspection" json:"inspection,omitempty"`
}

func (m *ImageArchiveData) Reset()                    { *m = ImageArchiveData{} }
func (m *ImageArchiveData) String() string            { return proto.CompactTextString(m) }
func (*ImageArchiveData) ProtoMessage()               {}
func (*ImageArchiveData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{10} }

func (m *ImageArchiveData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageArchiveData) GetInspection() *moby.ImageInspect {
	if m != nil {
		return m.Inspection
	}
	return nil
}

// SearchResult describes a search result returned from a registry
// to see https://github.com/moby/moby/blob/master/api/types/registry/registry.go
type SearchResult struct {
	// StarCount indicates the number of stars this repository has
	StarCount int32 `protobuf:"varint,1,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
	// IsOfficial is true if the result is from an official repository.
	IsOfficial bool `protobuf:"varint,2,opt,name=is_official,json=isOfficial,proto3" json:"is_official,omitempty"`
	// Name is the name of the repository
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// IsAutomated indicates whether the result is automated
	IsAutomated bool `protobuf:"varint,4,opt,name=is_automated,json=isAutomated,proto3" json:"is_automated,omitempty"`
	// Description is a textual description of the repository
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{11} }

func (m *SearchResult) GetStarCount() int32 {
	if m != nil {
		return m.StarCount
	}
	return 0
}

func (m *SearchResult) GetIsOfficial() bool {
	if m != nil {
		return m.IsOfficial
	}
	return false
}

func (m *SearchResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchResult) GetIsAutomated() bool {
	if m != nil {
		return m.IsAutomated
	}
	return false
}

func (m *SearchResult) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type DockerNetworkData struct {
	NetworkResources []*moby.NetworkResource `protobuf:"bytes,1,rep,name=network_resources,json=networkResources" json:"network_resources,omitempty"`
	StateCode        int32                   `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage     string                  `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *DockerNetworkData) Reset()                    { *m = DockerNetworkData{} }
func (m *DockerNetworkData) String() string            { return proto.CompactTextString(m) }
func (*DockerNetworkData) ProtoMessage()               {}
func (*DockerNetworkData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{12} }

func (m *DockerNetworkData) GetNetworkResources() []*moby.NetworkResource {
	if m != nil {
		return m.NetworkResources
	}
	return nil
}

func (m *DockerNetworkData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerNetworkData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type DockerNetworkCreationReqResp struct {
	NetworkCreateRequest  *moby.NetworkCreateRequest  `protobuf:"bytes,1,opt,name=network_create_request,json=networkCreateRequest" json:"network_create_request,omitempty"`
	NetworkCreateResponse *moby.NetworkCreateResponse `protobuf:"bytes,2,opt,name=network_create_response,json=networkCreateResponse" json:"network_create_response,omitempty"`
	StateCode             int32                       `protobuf:"varint,3,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage          string                      `protobuf:"bytes,4,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *DockerNetworkCreationReqResp) Reset()         { *m = DockerNetworkCreationReqResp{} }
func (m *DockerNetworkCreationReqResp) String() string { return proto.CompactTextString(m) }
func (*DockerNetworkCreationReqResp) ProtoMessage()    {}
func (*DockerNetworkCreationReqResp) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{13}
}

func (m *DockerNetworkCreationReqResp) GetNetworkCreateRequest() *moby.NetworkCreateRequest {
	if m != nil {
		return m.NetworkCreateRequest
	}
	return nil
}

func (m *DockerNetworkCreationReqResp) GetNetworkCreateResponse() *moby.NetworkCreateResponse {
	if m != nil {
		return m.NetworkCreateResponse
	}
	return nil
}

func (m *DockerNetworkCreationReqResp) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerNetworkCreationReqResp) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type BridgedNetworkingData struct {
	LinuxBridges         []*BridgedNetworkingData_LinuxBridgeInfo        `protobuf:"bytes,1,rep,name=linux_bridges,json=linuxBridges" json:"linux_bridges,omitempty"`
	ContainersNetworking *BridgedNetworkingData_ContainersNetworkingInfo `protobuf:"bytes,2,opt,name=containers_networking,json=containersNetworking" json:"containers_networking,omitempty"`
	VethPairs            map[string]string                               `protobuf:"bytes,3,rep,name=veth_pairs,json=vethPairs" json:"veth_pairs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StateCode            int32                                           `protobuf:"varint,4,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage         string                                          `protobuf:"bytes,5,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *BridgedNetworkingData) Reset()                    { *m = BridgedNetworkingData{} }
func (m *BridgedNetworkingData) String() string            { return proto.CompactTextString(m) }
func (*BridgedNetworkingData) ProtoMessage()               {}
func (*BridgedNetworkingData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{14} }

func (m *BridgedNetworkingData) GetLinuxBridges() []*BridgedNetworkingData_LinuxBridgeInfo {
	if m != nil {
		return m.LinuxBridges
	}
	return nil
}

func (m *BridgedNetworkingData) GetContainersNetworking() *BridgedNetworkingData_ContainersNetworkingInfo {
	if m != nil {
		return m.ContainersNetworking
	}
	return nil
}

func (m *BridgedNetworkingData) GetVethPairs() map[string]string {
	if m != nil {
		return m.VethPairs
	}
	return nil
}

func (m *BridgedNetworkingData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *BridgedNetworkingData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

type BridgedNetworkingData_LinkLayerInfo struct {
	Index            string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Name             string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DataLinkStatus   []string `protobuf:"bytes,3,rep,name=data_link_status,json=dataLinkStatus" json:"data_link_status,omitempty"`
	DataLinkConf     []string `protobuf:"bytes,4,rep,name=data_link_conf,json=dataLinkConf" json:"data_link_conf,omitempty"`
	DataLinkFrame    string   `protobuf:"bytes,5,opt,name=data_link_frame,json=dataLinkFrame,proto3" json:"data_link_frame,omitempty"`
	DataLinkEtherMac string   `protobuf:"bytes,6,opt,name=data_link_ether_mac,json=dataLinkEtherMac,proto3" json:"data_link_ether_mac,omitempty"`
	DataLinkEtherBrd string   `protobuf:"bytes,7,opt,name=data_link_ether_brd,json=dataLinkEtherBrd,proto3" json:"data_link_ether_brd,omitempty"`
	DataLinkNetnsId  string   `protobuf:"bytes,8,opt,name=data_link_netns_id,json=dataLinkNetnsId,proto3" json:"data_link_netns_id,omitempty"`
}

func (m *BridgedNetworkingData_LinkLayerInfo) Reset()         { *m = BridgedNetworkingData_LinkLayerInfo{} }
func (m *BridgedNetworkingData_LinkLayerInfo) String() string { return proto.CompactTextString(m) }
func (*BridgedNetworkingData_LinkLayerInfo) ProtoMessage()    {}
func (*BridgedNetworkingData_LinkLayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{14, 0}
}

func (m *BridgedNetworkingData_LinkLayerInfo) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *BridgedNetworkingData_LinkLayerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BridgedNetworkingData_LinkLayerInfo) GetDataLinkStatus() []string {
	if m != nil {
		return m.DataLinkStatus
	}
	return nil
}

func (m *BridgedNetworkingData_LinkLayerInfo) GetDataLinkConf() []string {
	if m != nil {
		return m.DataLinkConf
	}
	return nil
}

func (m *BridgedNetworkingData_LinkLayerInfo) GetDataLinkFrame() string {
	if m != nil {
		return m.DataLinkFrame
	}
	return ""
}

func (m *BridgedNetworkingData_LinkLayerInfo) GetDataLinkEtherMac() string {
	if m != nil {
		return m.DataLinkEtherMac
	}
	return ""
}

func (m *BridgedNetworkingData_LinkLayerInfo) GetDataLinkEtherBrd() string {
	if m != nil {
		return m.DataLinkEtherBrd
	}
	return ""
}

func (m *BridgedNetworkingData_LinkLayerInfo) GetDataLinkNetnsId() string {
	if m != nil {
		return m.DataLinkNetnsId
	}
	return ""
}

type BridgedNetworkingData_IPAddressInfo struct {
	LinkInfo   *BridgedNetworkingData_LinkLayerInfo `protobuf:"bytes,1,opt,name=link_info,json=linkInfo" json:"link_info,omitempty"`
	Ipv4       string                               `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	V4Mask     string                               `protobuf:"bytes,3,opt,name=v4_mask,json=v4Mask,proto3" json:"v4_mask,omitempty"`
	V4Info     []string                             `protobuf:"bytes,4,rep,name=v4_info,json=v4Info" json:"v4_info,omitempty"`
	V4Lifetime []string                             `protobuf:"bytes,5,rep,name=v4_lifetime,json=v4Lifetime" json:"v4_lifetime,omitempty"`
	Ipv6       string                               `protobuf:"bytes,6,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	V6Mask     string                               `protobuf:"bytes,7,opt,name=v6_mask,json=v6Mask,proto3" json:"v6_mask,omitempty"`
	V6Info     []string                             `protobuf:"bytes,8,rep,name=v6_info,json=v6Info" json:"v6_info,omitempty"`
	V6Lifetime []string                             `protobuf:"bytes,9,rep,name=v6_lifetime,json=v6Lifetime" json:"v6_lifetime,omitempty"`
}

func (m *BridgedNetworkingData_IPAddressInfo) Reset()         { *m = BridgedNetworkingData_IPAddressInfo{} }
func (m *BridgedNetworkingData_IPAddressInfo) String() string { return proto.CompactTextString(m) }
func (*BridgedNetworkingData_IPAddressInfo) ProtoMessage()    {}
func (*BridgedNetworkingData_IPAddressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{14, 1}
}

func (m *BridgedNetworkingData_IPAddressInfo) GetLinkInfo() *BridgedNetworkingData_LinkLayerInfo {
	if m != nil {
		return m.LinkInfo
	}
	return nil
}

func (m *BridgedNetworkingData_IPAddressInfo) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *BridgedNetworkingData_IPAddressInfo) GetV4Mask() string {
	if m != nil {
		return m.V4Mask
	}
	return ""
}

func (m *BridgedNetworkingData_IPAddressInfo) GetV4Info() []string {
	if m != nil {
		return m.V4Info
	}
	return nil
}

func (m *BridgedNetworkingData_IPAddressInfo) GetV4Lifetime() []string {
	if m != nil {
		return m.V4Lifetime
	}
	return nil
}

func (m *BridgedNetworkingData_IPAddressInfo) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *BridgedNetworkingData_IPAddressInfo) GetV6Mask() string {
	if m != nil {
		return m.V6Mask
	}
	return ""
}

func (m *BridgedNetworkingData_IPAddressInfo) GetV6Info() []string {
	if m != nil {
		return m.V6Info
	}
	return nil
}

func (m *BridgedNetworkingData_IPAddressInfo) GetV6Lifetime() []string {
	if m != nil {
		return m.V6Lifetime
	}
	return nil
}

type BridgedNetworkingData_LinuxBridgeLearnedMac struct {
	PortNo      string `protobuf:"bytes,1,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	MacAddr     string `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	IsLocal     string `protobuf:"bytes,3,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	AgeingTimer string `protobuf:"bytes,4,opt,name=ageing_timer,json=ageingTimer,proto3" json:"ageing_timer,omitempty"`
}

func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) Reset() {
	*m = BridgedNetworkingData_LinuxBridgeLearnedMac{}
}
func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) String() string {
	return proto.CompactTextString(m)
}
func (*BridgedNetworkingData_LinuxBridgeLearnedMac) ProtoMessage() {}
func (*BridgedNetworkingData_LinuxBridgeLearnedMac) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{14, 2}
}

func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) GetPortNo() string {
	if m != nil {
		return m.PortNo
	}
	return ""
}

func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) GetIsLocal() string {
	if m != nil {
		return m.IsLocal
	}
	return ""
}

func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) GetAgeingTimer() string {
	if m != nil {
		return m.AgeingTimer
	}
	return ""
}

type BridgedNetworkingData_LinuxBridgeInfo struct {
	Id              string                                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StpEnabled      string                                         `protobuf:"bytes,3,opt,name=stp_enabled,json=stpEnabled,proto3" json:"stp_enabled,omitempty"`
	Interfaces      []string                                       `protobuf:"bytes,4,rep,name=interfaces" json:"interfaces,omitempty"`
	MacInfo         []*BridgedNetworkingData_LinuxBridgeLearnedMac `protobuf:"bytes,5,rep,name=mac_info,json=macInfo" json:"mac_info,omitempty"`
	IpAddressesInfo []*BridgedNetworkingData_IPAddressInfo         `protobuf:"bytes,6,rep,name=ip_addresses_info,json=ipAddressesInfo" json:"ip_addresses_info,omitempty"`
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) Reset()         { *m = BridgedNetworkingData_LinuxBridgeInfo{} }
func (m *BridgedNetworkingData_LinuxBridgeInfo) String() string { return proto.CompactTextString(m) }
func (*BridgedNetworkingData_LinuxBridgeInfo) ProtoMessage()    {}
func (*BridgedNetworkingData_LinuxBridgeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{14, 3}
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) GetStpEnabled() string {
	if m != nil {
		return m.StpEnabled
	}
	return ""
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) GetMacInfo() []*BridgedNetworkingData_LinuxBridgeLearnedMac {
	if m != nil {
		return m.MacInfo
	}
	return nil
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) GetIpAddressesInfo() []*BridgedNetworkingData_IPAddressInfo {
	if m != nil {
		return m.IpAddressesInfo
	}
	return nil
}

type BridgedNetworkingData_ContainersNetworkingInfo struct {
	NetworkResources []*moby.NetworkResource                `protobuf:"bytes,1,rep,name=network_resources,json=networkResources" json:"network_resources,omitempty"`
	ContainersInfo   []*moby.ContainerJSON                  `protobuf:"bytes,2,rep,name=containers_info,json=containersInfo" json:"containers_info,omitempty"`
	AddressesInfo    []*BridgedNetworkingData_IPAddressInfo `protobuf:"bytes,3,rep,name=addresses_info,json=addressesInfo" json:"addresses_info,omitempty"`
}

func (m *BridgedNetworkingData_ContainersNetworkingInfo) Reset() {
	*m = BridgedNetworkingData_ContainersNetworkingInfo{}
}
func (m *BridgedNetworkingData_ContainersNetworkingInfo) String() string {
	return proto.CompactTextString(m)
}
func (*BridgedNetworkingData_ContainersNetworkingInfo) ProtoMessage() {}
func (*BridgedNetworkingData_ContainersNetworkingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{14, 4}
}

func (m *BridgedNetworkingData_ContainersNetworkingInfo) GetNetworkResources() []*moby.NetworkResource {
	if m != nil {
		return m.NetworkResources
	}
	return nil
}

func (m *BridgedNetworkingData_ContainersNetworkingInfo) GetContainersInfo() []*moby.ContainerJSON {
	if m != nil {
		return m.ContainersInfo
	}
	return nil
}

func (m *BridgedNetworkingData_ContainersNetworkingInfo) GetAddressesInfo() []*BridgedNetworkingData_IPAddressInfo {
	if m != nil {
		return m.AddressesInfo
	}
	return nil
}

type EthernetSniffingData struct {
	Iface           string   `protobuf:"bytes,1,opt,name=iface,proto3" json:"iface,omitempty"`
	StatsAndPackets []string `protobuf:"bytes,2,rep,name=stats_and_packets,json=statsAndPackets" json:"stats_and_packets,omitempty"`
	StateCode       int32    `protobuf:"varint,3,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage    string   `protobuf:"bytes,4,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *EthernetSniffingData) Reset()                    { *m = EthernetSniffingData{} }
func (m *EthernetSniffingData) String() string            { return proto.CompactTextString(m) }
func (*EthernetSniffingData) ProtoMessage()               {}
func (*EthernetSniffingData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{15} }

func (m *EthernetSniffingData) GetIface() string {
	if m != nil {
		return m.Iface
	}
	return ""
}

func (m *EthernetSniffingData) GetStatsAndPackets() []string {
	if m != nil {
		return m.StatsAndPackets
	}
	return nil
}

func (m *EthernetSniffingData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *EthernetSniffingData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoMessage)(nil), "pb.EchoMessage")
	proto.RegisterType((*InstrumentMetadata)(nil), "pb.InstrumentMetadata")
	proto.RegisterType((*DockerRunData)(nil), "pb.DockerRunData")
	proto.RegisterType((*DockerPullData)(nil), "pb.DockerPullData")
	proto.RegisterType((*DockerProcessStatusReqResp)(nil), "pb.DockerProcessStatusReqResp")
	proto.RegisterType((*DockerContainerInspection)(nil), "pb.DockerContainerInspection")
	proto.RegisterType((*ProvisioningsData)(nil), "pb.ProvisioningsData")
	proto.RegisterType((*ProvisioningsData_Metadata)(nil), "pb.ProvisioningsData.Metadata")
	proto.RegisterType((*InstantiationData)(nil), "pb.InstantiationData")
	proto.RegisterType((*RegistryRepositoryData)(nil), "pb.RegistryRepositoryData")
	proto.RegisterType((*RegistryRepositoryData_Tag)(nil), "pb.RegistryRepositoryData.Tag")
	proto.RegisterType((*RegistryRepositoryData_Catalog)(nil), "pb.RegistryRepositoryData.Catalog")
	proto.RegisterType((*RegistryRepositoryData_Registry)(nil), "pb.RegistryRepositoryData.Registry")
	proto.RegisterType((*ImageRegistryData)(nil), "pb.ImageRegistryData")
	proto.RegisterType((*ImageArchiveData)(nil), "pb.ImageArchiveData")
	proto.RegisterType((*SearchResult)(nil), "pb.SearchResult")
	proto.RegisterType((*DockerNetworkData)(nil), "pb.DockerNetworkData")
	proto.RegisterType((*DockerNetworkCreationReqResp)(nil), "pb.DockerNetworkCreationReqResp")
	proto.RegisterType((*BridgedNetworkingData)(nil), "pb.BridgedNetworkingData")
	proto.RegisterType((*BridgedNetworkingData_LinkLayerInfo)(nil), "pb.BridgedNetworkingData.LinkLayerInfo")
	proto.RegisterType((*BridgedNetworkingData_IPAddressInfo)(nil), "pb.BridgedNetworkingData.IPAddressInfo")
	proto.RegisterType((*BridgedNetworkingData_LinuxBridgeLearnedMac)(nil), "pb.BridgedNetworkingData.LinuxBridgeLearnedMac")
	proto.RegisterType((*BridgedNetworkingData_LinuxBridgeInfo)(nil), "pb.BridgedNetworkingData.LinuxBridgeInfo")
	proto.RegisterType((*BridgedNetworkingData_ContainersNetworkingInfo)(nil), "pb.BridgedNetworkingData.ContainersNetworkingInfo")
	proto.RegisterType((*EthernetSniffingData)(nil), "pb.EthernetSniffingData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EchoService service

type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	// Like 'docker pull' command
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "image": "tomcat:8"
	// }
	PullImage(ctx context.Context, in *DockerPullData, opts ...grpc.CallOption) (*DockerPullData, error)
	// Like 'docker run' command
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "config":
	//     {
	//       "image": "nginx",
	//       "cmd": [
	//         "-c", "printenv && ls /usr/share/nginx/html && nginx -g \"daemon off;\""
	//       ],
	//       "entrypoint": [
	//         "/bin/bash"
	//       ],
	//       "env": [
	//         "GOAPTH=/home/vagrant/go",
	//         "JAVA_HOME=/opt/jdk1.8.0_112"
	//       ],
	//       "exposed_ports":
	//         {
	//           "value":
	//             {
	//               "80": "webui"
	//             }
	//         },
	//       "volumes":
	//         {
	//           "/etc/nginx/nginx.conf": "sysconf",
	//           "/etc/nginx/conf.d/default.conf": "usrconf",
	//           "/usr/share/nginx/html/": "usrdata"
	//         }
	//     },
	//   "host_config":
	//     {
	//       "binds": [
	//         "/home/vagrant/project-php/etc/nginx.conf:/etc/nginx/nginx.conf,Z",
	//         "/home/vagrant/project-php/etc/default.conf:/etc/nginx/conf.d/default.conf:Z",
	//         "/home/vagrant/project-php/src/:/usr/share/nginx/html/:ro"
	//       ],
	//       "port_bindings":
	//         {
	//           "value":
	//             {
	//               "80":
	//                 {
	//                   "host_port": "80"
	//                 }
	//             }
	//         },
	//       "resources":
	//         {
	//           "memory": 300000000
	//         }
	//     },
	//   "network_config":
	//     {
	//     },
	//   "container_name": "nginx"
	// }
	// For output, plus returning elements:
	// {
	//   "state_code": 0, // succeeded, otherwise none zero
	//   "state_message": "if failed, provide error information"
	//   "container_id": "returning value of docker engine"
	// }
	RunContainer(ctx context.Context, in *DockerRunData, opts ...grpc.CallOption) (*DockerRunData, error)
	// Like 'docker ps' command
	//
	ProcessStatuses(ctx context.Context, in *DockerProcessStatusReqResp, opts ...grpc.CallOption) (*DockerProcessStatusReqResp, error)
	// Run containers with a user namespace information
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "basic-web-security",
	//       "class_name": "http-protocol"
	//       "field_name": "http-method"
	//     },
	//   "provisionings": [
	//     <list of DockerRunData type, see previous>
	//   ]
	// }
	ProvisionContainers(ctx context.Context, in *ProvisioningsData, opts ...grpc.CallOption) (*ProvisioningsData, error)
	// Delete containers with a user namespace information
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "basic-web-security",
	//       "class_name": "http-protocol"
	//       "field_name": "http-method"
	//     }
	// }
	// And returning information append this object for output:
	// {
	//   "provisionings": [
	//     list of DockerRunData type, see previous
	//   ]
	// }
	TerminationContainers(ctx context.Context, in *ProvisioningsData, opts ...grpc.CallOption) (*ProvisioningsData, error)
	// Find containers with instantiating of a user namespace
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "default",
	//       "class_name": "default"
	//       "field_name": "default"
	//     }
	// }
	// For output, plus a returning object:
	// {
	//   "instantiation": [
	//     {
	//       // List of Moby Container type
	//     }
	//   ]
	// }
	ReapInstantiation(ctx context.Context, in *InstantiationData, opts ...grpc.CallOption) (*InstantiationData, error)
	// List registry, include Docker Hub, or private registry (using .docker/config.json)
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "repositories": [
	//     {
	//       name: "127.0.0.1:5000"
	//     }
	//   ]
	// }
	// For output, plus a returning object:
	// {
	//   "repositories": [
	//     {
	//       name: "127.0.0.1:5000",
	//       catalogs: [
	//         {
	//           "name": "nginx",
	//           "tags": [
	//             {
	//               "name": "latest"
	//             }
	//           ]
	//         }
	//       ]
	//     }
	//   ],
	//   "state_code": 0,  // Value greater than zero indicates error
	//   "state_message": "..." // Usually error message
	// }
	ReapRegistryForRepositories(ctx context.Context, in *RegistryRepositoryData, opts ...grpc.CallOption) (*RegistryRepositoryData, error)
	ReapDockerNetwork(ctx context.Context, in *DockerNetworkData, opts ...grpc.CallOption) (*DockerNetworkData, error)
	CreateDockerNetwork(ctx context.Context, in *DockerNetworkCreationReqResp, opts ...grpc.CallOption) (*DockerNetworkCreationReqResp, error)
	SnoopBridgedNetworkLandscape(ctx context.Context, in *BridgedNetworkingData, opts ...grpc.CallOption) (*BridgedNetworkingData, error)
	SniffEtherNetworking(ctx context.Context, in *EthernetSniffingData, opts ...grpc.CallOption) (*EthernetSniffingData, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := grpc.Invoke(ctx, "/pb.EchoService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) PullImage(ctx context.Context, in *DockerPullData, opts ...grpc.CallOption) (*DockerPullData, error) {
	out := new(DockerPullData)
	err := grpc.Invoke(ctx, "/pb.EchoService/PullImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) RunContainer(ctx context.Context, in *DockerRunData, opts ...grpc.CallOption) (*DockerRunData, error) {
	out := new(DockerRunData)
	err := grpc.Invoke(ctx, "/pb.EchoService/RunContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ProcessStatuses(ctx context.Context, in *DockerProcessStatusReqResp, opts ...grpc.CallOption) (*DockerProcessStatusReqResp, error) {
	out := new(DockerProcessStatusReqResp)
	err := grpc.Invoke(ctx, "/pb.EchoService/ProcessStatuses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ProvisionContainers(ctx context.Context, in *ProvisioningsData, opts ...grpc.CallOption) (*ProvisioningsData, error) {
	out := new(ProvisioningsData)
	err := grpc.Invoke(ctx, "/pb.EchoService/ProvisionContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) TerminationContainers(ctx context.Context, in *ProvisioningsData, opts ...grpc.CallOption) (*ProvisioningsData, error) {
	out := new(ProvisioningsData)
	err := grpc.Invoke(ctx, "/pb.EchoService/TerminationContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ReapInstantiation(ctx context.Context, in *InstantiationData, opts ...grpc.CallOption) (*InstantiationData, error) {
	out := new(InstantiationData)
	err := grpc.Invoke(ctx, "/pb.EchoService/ReapInstantiation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ReapRegistryForRepositories(ctx context.Context, in *RegistryRepositoryData, opts ...grpc.CallOption) (*RegistryRepositoryData, error) {
	out := new(RegistryRepositoryData)
	err := grpc.Invoke(ctx, "/pb.EchoService/ReapRegistryForRepositories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ReapDockerNetwork(ctx context.Context, in *DockerNetworkData, opts ...grpc.CallOption) (*DockerNetworkData, error) {
	out := new(DockerNetworkData)
	err := grpc.Invoke(ctx, "/pb.EchoService/ReapDockerNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) CreateDockerNetwork(ctx context.Context, in *DockerNetworkCreationReqResp, opts ...grpc.CallOption) (*DockerNetworkCreationReqResp, error) {
	out := new(DockerNetworkCreationReqResp)
	err := grpc.Invoke(ctx, "/pb.EchoService/CreateDockerNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) SnoopBridgedNetworkLandscape(ctx context.Context, in *BridgedNetworkingData, opts ...grpc.CallOption) (*BridgedNetworkingData, error) {
	out := new(BridgedNetworkingData)
	err := grpc.Invoke(ctx, "/pb.EchoService/SnoopBridgedNetworkLandscape", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) SniffEtherNetworking(ctx context.Context, in *EthernetSniffingData, opts ...grpc.CallOption) (*EthernetSniffingData, error) {
	out := new(EthernetSniffingData)
	err := grpc.Invoke(ctx, "/pb.EchoService/SniffEtherNetworking", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EchoService service

type EchoServiceServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	// Like 'docker pull' command
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "image": "tomcat:8"
	// }
	PullImage(context.Context, *DockerPullData) (*DockerPullData, error)
	// Like 'docker run' command
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "config":
	//     {
	//       "image": "nginx",
	//       "cmd": [
	//         "-c", "printenv && ls /usr/share/nginx/html && nginx -g \"daemon off;\""
	//       ],
	//       "entrypoint": [
	//         "/bin/bash"
	//       ],
	//       "env": [
	//         "GOAPTH=/home/vagrant/go",
	//         "JAVA_HOME=/opt/jdk1.8.0_112"
	//       ],
	//       "exposed_ports":
	//         {
	//           "value":
	//             {
	//               "80": "webui"
	//             }
	//         },
	//       "volumes":
	//         {
	//           "/etc/nginx/nginx.conf": "sysconf",
	//           "/etc/nginx/conf.d/default.conf": "usrconf",
	//           "/usr/share/nginx/html/": "usrdata"
	//         }
	//     },
	//   "host_config":
	//     {
	//       "binds": [
	//         "/home/vagrant/project-php/etc/nginx.conf:/etc/nginx/nginx.conf,Z",
	//         "/home/vagrant/project-php/etc/default.conf:/etc/nginx/conf.d/default.conf:Z",
	//         "/home/vagrant/project-php/src/:/usr/share/nginx/html/:ro"
	//       ],
	//       "port_bindings":
	//         {
	//           "value":
	//             {
	//               "80":
	//                 {
	//                   "host_port": "80"
	//                 }
	//             }
	//         },
	//       "resources":
	//         {
	//           "memory": 300000000
	//         }
	//     },
	//   "network_config":
	//     {
	//     },
	//   "container_name": "nginx"
	// }
	// For output, plus returning elements:
	// {
	//   "state_code": 0, // succeeded, otherwise none zero
	//   "state_message": "if failed, provide error information"
	//   "container_id": "returning value of docker engine"
	// }
	RunContainer(context.Context, *DockerRunData) (*DockerRunData, error)
	// Like 'docker ps' command
	//
	ProcessStatuses(context.Context, *DockerProcessStatusReqResp) (*DockerProcessStatusReqResp, error)
	// Run containers with a user namespace information
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "basic-web-security",
	//       "class_name": "http-protocol"
	//       "field_name": "http-method"
	//     },
	//   "provisionings": [
	//     <list of DockerRunData type, see previous>
	//   ]
	// }
	ProvisionContainers(context.Context, *ProvisioningsData) (*ProvisioningsData, error)
	// Delete containers with a user namespace information
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "basic-web-security",
	//       "class_name": "http-protocol"
	//       "field_name": "http-method"
	//     }
	// }
	// And returning information append this object for output:
	// {
	//   "provisionings": [
	//     list of DockerRunData type, see previous
	//   ]
	// }
	TerminationContainers(context.Context, *ProvisioningsData) (*ProvisioningsData, error)
	// Find containers with instantiating of a user namespace
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "default",
	//       "class_name": "default"
	//       "field_name": "default"
	//     }
	// }
	// For output, plus a returning object:
	// {
	//   "instantiation": [
	//     {
	//       // List of Moby Container type
	//     }
	//   ]
	// }
	ReapInstantiation(context.Context, *InstantiationData) (*InstantiationData, error)
	// List registry, include Docker Hub, or private registry (using .docker/config.json)
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "repositories": [
	//     {
	//       name: "127.0.0.1:5000"
	//     }
	//   ]
	// }
	// For output, plus a returning object:
	// {
	//   "repositories": [
	//     {
	//       name: "127.0.0.1:5000",
	//       catalogs: [
	//         {
	//           "name": "nginx",
	//           "tags": [
	//             {
	//               "name": "latest"
	//             }
	//           ]
	//         }
	//       ]
	//     }
	//   ],
	//   "state_code": 0,  // Value greater than zero indicates error
	//   "state_message": "..." // Usually error message
	// }
	ReapRegistryForRepositories(context.Context, *RegistryRepositoryData) (*RegistryRepositoryData, error)
	ReapDockerNetwork(context.Context, *DockerNetworkData) (*DockerNetworkData, error)
	CreateDockerNetwork(context.Context, *DockerNetworkCreationReqResp) (*DockerNetworkCreationReqResp, error)
	SnoopBridgedNetworkLandscape(context.Context, *BridgedNetworkingData) (*BridgedNetworkingData, error)
	SniffEtherNetworking(context.Context, *EthernetSniffingData) (*EthernetSniffingData, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_PullImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerPullData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).PullImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/PullImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).PullImage(ctx, req.(*DockerPullData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_RunContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerRunData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).RunContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/RunContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).RunContainer(ctx, req.(*DockerRunData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ProcessStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerProcessStatusReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).ProcessStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/ProcessStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).ProcessStatuses(ctx, req.(*DockerProcessStatusReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ProvisionContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisioningsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).ProvisionContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/ProvisionContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).ProvisionContainers(ctx, req.(*ProvisioningsData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_TerminationContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisioningsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).TerminationContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/TerminationContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).TerminationContainers(ctx, req.(*ProvisioningsData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ReapInstantiation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstantiationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).ReapInstantiation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/ReapInstantiation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).ReapInstantiation(ctx, req.(*InstantiationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ReapRegistryForRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryRepositoryData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).ReapRegistryForRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/ReapRegistryForRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).ReapRegistryForRepositories(ctx, req.(*RegistryRepositoryData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ReapDockerNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerNetworkData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).ReapDockerNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/ReapDockerNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).ReapDockerNetwork(ctx, req.(*DockerNetworkData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_CreateDockerNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerNetworkCreationReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).CreateDockerNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/CreateDockerNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).CreateDockerNetwork(ctx, req.(*DockerNetworkCreationReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_SnoopBridgedNetworkLandscape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgedNetworkingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).SnoopBridgedNetworkLandscape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/SnoopBridgedNetworkLandscape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).SnoopBridgedNetworkLandscape(ctx, req.(*BridgedNetworkingData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_SniffEtherNetworking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetSniffingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).SniffEtherNetworking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/SniffEtherNetworking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).SniffEtherNetworking(ctx, req.(*EthernetSniffingData))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "PullImage",
			Handler:    _EchoService_PullImage_Handler,
		},
		{
			MethodName: "RunContainer",
			Handler:    _EchoService_RunContainer_Handler,
		},
		{
			MethodName: "ProcessStatuses",
			Handler:    _EchoService_ProcessStatuses_Handler,
		},
		{
			MethodName: "ProvisionContainers",
			Handler:    _EchoService_ProvisionContainers_Handler,
		},
		{
			MethodName: "TerminationContainers",
			Handler:    _EchoService_TerminationContainers_Handler,
		},
		{
			MethodName: "ReapInstantiation",
			Handler:    _EchoService_ReapInstantiation_Handler,
		},
		{
			MethodName: "ReapRegistryForRepositories",
			Handler:    _EchoService_ReapRegistryForRepositories_Handler,
		},
		{
			MethodName: "ReapDockerNetwork",
			Handler:    _EchoService_ReapDockerNetwork_Handler,
		},
		{
			MethodName: "CreateDockerNetwork",
			Handler:    _EchoService_CreateDockerNetwork_Handler,
		},
		{
			MethodName: "SnoopBridgedNetworkLandscape",
			Handler:    _EchoService_SnoopBridgedNetworkLandscape_Handler,
		},
		{
			MethodName: "SniffEtherNetworking",
			Handler:    _EchoService_SniffEtherNetworking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}

func (m *EchoMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *InstrumentMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstrumentMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CategoryName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.CategoryName)))
		i += copy(dAtA[i:], m.CategoryName)
	}
	if len(m.ClassName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ClassName)))
		i += copy(dAtA[i:], m.ClassName)
	}
	if len(m.FieldName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.FieldName)))
		i += copy(dAtA[i:], m.FieldName)
	}
	return i, nil
}

func (m *DockerRunData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerRunData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Config.Size()))
		n1, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.HostConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.HostConfig.Size()))
		n2, err := m.HostConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.NetworkConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NetworkConfig.Size()))
		n3, err := m.NetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.ContainerName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ContainerName)))
		i += copy(dAtA[i:], m.ContainerName)
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if len(m.ContainerId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ContainerId)))
		i += copy(dAtA[i:], m.ContainerId)
	}
	return i, nil
}

func (m *DockerPullData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerPullData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if len(m.ImageId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ImageId)))
		i += copy(dAtA[i:], m.ImageId)
	}
	if len(m.ProgressReport) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ProgressReport)))
		i += copy(dAtA[i:], m.ProgressReport)
	}
	return i, nil
}

func (m *DockerProcessStatusReqResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerProcessStatusReqResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Options.Size()))
		n4, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Containers) > 0 {
		for _, msg := range m.Containers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *DockerContainerInspection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerContainerInspection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContainerInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ContainerInfo.Size()))
		n5, err := m.ContainerInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *ProvisioningsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvisioningsData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.Metadata != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Metadata.Size()))
		n6, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Provisionings) > 0 {
		for _, msg := range m.Provisionings {
			dAtA[i] = 0x22
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProvisioningsData_Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvisioningsData_Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CategoryName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.CategoryName)))
		i += copy(dAtA[i:], m.CategoryName)
	}
	if len(m.ClassName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ClassName)))
		i += copy(dAtA[i:], m.ClassName)
	}
	if len(m.FieldName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.FieldName)))
		i += copy(dAtA[i:], m.FieldName)
	}
	return i, nil
}

func (m *InstantiationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstantiationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.Metadata != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Metadata.Size()))
		n7, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Instantiation) > 0 {
		for _, msg := range m.Instantiation {
			dAtA[i] = 0x22
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *RegistryRepositoryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryRepositoryData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Registries) > 0 {
		for _, msg := range m.Registries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *RegistryRepositoryData_Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryRepositoryData_Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *RegistryRepositoryData_Catalog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryRepositoryData_Catalog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RegistryRepositoryData_Registry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryRepositoryData_Registry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Catalogs) > 0 {
		for _, msg := range m.Catalogs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TlsDisabled {
		dAtA[i] = 0x18
		i++
		if m.TlsDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ImageRegistryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRegistryData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Registration != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Registration.Size()))
		n8, err := m.Registration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ImageArchiveData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageArchiveData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Inspection != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Inspection.Size()))
		n9, err := m.Inspection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *SearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StarCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StarCount))
	}
	if m.IsOfficial {
		dAtA[i] = 0x10
		i++
		if m.IsOfficial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.IsAutomated {
		dAtA[i] = 0x20
		i++
		if m.IsAutomated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *DockerNetworkData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerNetworkData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkResources) > 0 {
		for _, msg := range m.NetworkResources {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *DockerNetworkCreationReqResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerNetworkCreationReqResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NetworkCreateRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NetworkCreateRequest.Size()))
		n10, err := m.NetworkCreateRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.NetworkCreateResponse != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NetworkCreateResponse.Size()))
		n11, err := m.NetworkCreateResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *BridgedNetworkingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgedNetworkingData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LinuxBridges) > 0 {
		for _, msg := range m.LinuxBridges {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ContainersNetworking != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ContainersNetworking.Size()))
		n12, err := m.ContainersNetworking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.VethPairs) > 0 {
		for k, _ := range m.VethPairs {
			dAtA[i] = 0x1a
			i++
			v := m.VethPairs[k]
			mapSize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			i = encodeVarintService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *BridgedNetworkingData_LinkLayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgedNetworkingData_LinkLayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Index)))
		i += copy(dAtA[i:], m.Index)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DataLinkStatus) > 0 {
		for _, s := range m.DataLinkStatus {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DataLinkConf) > 0 {
		for _, s := range m.DataLinkConf {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DataLinkFrame) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.DataLinkFrame)))
		i += copy(dAtA[i:], m.DataLinkFrame)
	}
	if len(m.DataLinkEtherMac) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.DataLinkEtherMac)))
		i += copy(dAtA[i:], m.DataLinkEtherMac)
	}
	if len(m.DataLinkEtherBrd) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.DataLinkEtherBrd)))
		i += copy(dAtA[i:], m.DataLinkEtherBrd)
	}
	if len(m.DataLinkNetnsId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.DataLinkNetnsId)))
		i += copy(dAtA[i:], m.DataLinkNetnsId)
	}
	return i, nil
}

func (m *BridgedNetworkingData_IPAddressInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgedNetworkingData_IPAddressInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LinkInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.LinkInfo.Size()))
		n13, err := m.LinkInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Ipv4) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Ipv4)))
		i += copy(dAtA[i:], m.Ipv4)
	}
	if len(m.V4Mask) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.V4Mask)))
		i += copy(dAtA[i:], m.V4Mask)
	}
	if len(m.V4Info) > 0 {
		for _, s := range m.V4Info {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.V4Lifetime) > 0 {
		for _, s := range m.V4Lifetime {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Ipv6) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Ipv6)))
		i += copy(dAtA[i:], m.Ipv6)
	}
	if len(m.V6Mask) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.V6Mask)))
		i += copy(dAtA[i:], m.V6Mask)
	}
	if len(m.V6Info) > 0 {
		for _, s := range m.V6Info {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.V6Lifetime) > 0 {
		for _, s := range m.V6Lifetime {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PortNo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.PortNo)))
		i += copy(dAtA[i:], m.PortNo)
	}
	if len(m.MacAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.MacAddr)))
		i += copy(dAtA[i:], m.MacAddr)
	}
	if len(m.IsLocal) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.IsLocal)))
		i += copy(dAtA[i:], m.IsLocal)
	}
	if len(m.AgeingTimer) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.AgeingTimer)))
		i += copy(dAtA[i:], m.AgeingTimer)
	}
	return i, nil
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.StpEnabled) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StpEnabled)))
		i += copy(dAtA[i:], m.StpEnabled)
	}
	if len(m.Interfaces) > 0 {
		for _, s := range m.Interfaces {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.MacInfo) > 0 {
		for _, msg := range m.MacInfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.IpAddressesInfo) > 0 {
		for _, msg := range m.IpAddressesInfo {
			dAtA[i] = 0x32
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BridgedNetworkingData_ContainersNetworkingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgedNetworkingData_ContainersNetworkingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkResources) > 0 {
		for _, msg := range m.NetworkResources {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ContainersInfo) > 0 {
		for _, msg := range m.ContainersInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AddressesInfo) > 0 {
		for _, msg := range m.AddressesInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EthernetSniffingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthernetSniffingData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Iface) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Iface)))
		i += copy(dAtA[i:], m.Iface)
	}
	if len(m.StatsAndPackets) > 0 {
		for _, s := range m.StatsAndPackets {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func encodeFixed64Service(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Service(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EchoMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *InstrumentMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.CategoryName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerRunData) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.HostConfig != nil {
		l = m.HostConfig.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.NetworkConfig != nil {
		l = m.NetworkConfig.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerPullData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ProgressReport)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerProcessStatusReqResp) Size() (n int) {
	var l int
	_ = l
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerContainerInspection) Size() (n int) {
	var l int
	_ = l
	if m.ContainerInfo != nil {
		l = m.ContainerInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ProvisioningsData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Provisionings) > 0 {
		for _, e := range m.Provisionings {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ProvisioningsData_Metadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.CategoryName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *InstantiationData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Instantiation) > 0 {
		for _, e := range m.Instantiation {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegistryRepositoryData) Size() (n int) {
	var l int
	_ = l
	if len(m.Registries) > 0 {
		for _, e := range m.Registries {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegistryRepositoryData_Tag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegistryRepositoryData_Catalog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *RegistryRepositoryData_Registry) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Catalogs) > 0 {
		for _, e := range m.Catalogs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.TlsDisabled {
		n += 2
	}
	return n
}

func (m *ImageRegistryData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Registration != nil {
		l = m.Registration.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ImageArchiveData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Inspection != nil {
		l = m.Inspection.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SearchResult) Size() (n int) {
	var l int
	_ = l
	if m.StarCount != 0 {
		n += 1 + sovService(uint64(m.StarCount))
	}
	if m.IsOfficial {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.IsAutomated {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerNetworkData) Size() (n int) {
	var l int
	_ = l
	if len(m.NetworkResources) > 0 {
		for _, e := range m.NetworkResources {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerNetworkCreationReqResp) Size() (n int) {
	var l int
	_ = l
	if m.NetworkCreateRequest != nil {
		l = m.NetworkCreateRequest.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.NetworkCreateResponse != nil {
		l = m.NetworkCreateResponse.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *BridgedNetworkingData) Size() (n int) {
	var l int
	_ = l
	if len(m.LinuxBridges) > 0 {
		for _, e := range m.LinuxBridges {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.ContainersNetworking != nil {
		l = m.ContainersNetworking.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.VethPairs) > 0 {
		for k, v := range m.VethPairs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *BridgedNetworkingData_LinkLayerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.DataLinkStatus) > 0 {
		for _, s := range m.DataLinkStatus {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.DataLinkConf) > 0 {
		for _, s := range m.DataLinkConf {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.DataLinkFrame)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.DataLinkEtherMac)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.DataLinkEtherBrd)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.DataLinkNetnsId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *BridgedNetworkingData_IPAddressInfo) Size() (n int) {
	var l int
	_ = l
	if m.LinkInfo != nil {
		l = m.LinkInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Ipv4)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.V4Mask)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.V4Info) > 0 {
		for _, s := range m.V4Info {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.V4Lifetime) > 0 {
		for _, s := range m.V4Lifetime {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.V6Mask)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.V6Info) > 0 {
		for _, s := range m.V6Info {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.V6Lifetime) > 0 {
		for _, s := range m.V6Lifetime {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) Size() (n int) {
	var l int
	_ = l
	l = len(m.PortNo)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.MacAddr)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.IsLocal)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.AgeingTimer)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *BridgedNetworkingData_LinuxBridgeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.StpEnabled)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Interfaces) > 0 {
		for _, s := range m.Interfaces {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.MacInfo) > 0 {
		for _, e := range m.MacInfo {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.IpAddressesInfo) > 0 {
		for _, e := range m.IpAddressesInfo {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *BridgedNetworkingData_ContainersNetworkingInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.NetworkResources) > 0 {
		for _, e := range m.NetworkResources {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.ContainersInfo) > 0 {
		for _, e := range m.ContainersInfo {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.AddressesInfo) > 0 {
		for _, e := range m.AddressesInfo {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *EthernetSniffingData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Iface)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.StatsAndPackets) > 0 {
		for _, s := range m.StatsAndPackets {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EchoMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstrumentMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstrumentMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstrumentMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerRunData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerRunData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerRunData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &moby.Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostConfig == nil {
				m.HostConfig = &moby.HostConfig{}
			}
			if err := m.HostConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkConfig == nil {
				m.NetworkConfig = &moby.NetworkingConfig{}
			}
			if err := m.NetworkConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerPullData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerPullData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerPullData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressReport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgressReport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerProcessStatusReqResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerProcessStatusReqResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerProcessStatusReqResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &moby.ContainerListOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &moby.Container{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerContainerInspection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerContainerInspection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerContainerInspection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerInfo == nil {
				m.ContainerInfo = &moby.ContainerJSON{}
			}
			if err := m.ContainerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisioningsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisioningsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisioningsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ProvisioningsData_Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provisionings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provisionings = append(m.Provisionings, &DockerRunData{})
			if err := m.Provisionings[len(m.Provisionings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisioningsData_Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstantiationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantiationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantiationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &InstrumentMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instantiation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instantiation = append(m.Instantiation, &moby.Container{})
			if err := m.Instantiation[len(m.Instantiation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryRepositoryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryRepositoryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryRepositoryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registries = append(m.Registries, &RegistryRepositoryData_Registry{})
			if err := m.Registries[len(m.Registries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryRepositoryData_Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryRepositoryData_Catalog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Catalog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Catalog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &RegistryRepositoryData_Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryRepositoryData_Registry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Registry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Registry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Catalogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Catalogs = append(m.Catalogs, &RegistryRepositoryData_Catalog{})
			if err := m.Catalogs[len(m.Catalogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TlsDisabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageRegistryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageRegistryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageRegistryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Registration == nil {
				m.Registration = &moby.ImageSummary{}
			}
			if err := m.Registration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageArchiveData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageArchiveData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageArchiveData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inspection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inspection == nil {
				m.Inspection = &moby.ImageInspect{}
			}
			if err := m.Inspection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarCount", wireType)
			}
			m.StarCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOfficial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOfficial = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutomated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutomated = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerNetworkData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerNetworkData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerNetworkData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkResources = append(m.NetworkResources, &moby.NetworkResource{})
			if err := m.NetworkResources[len(m.NetworkResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerNetworkCreationReqResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerNetworkCreationReqResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerNetworkCreationReqResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkCreateRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkCreateRequest == nil {
				m.NetworkCreateRequest = &moby.NetworkCreateRequest{}
			}
			if err := m.NetworkCreateRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkCreateResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkCreateResponse == nil {
				m.NetworkCreateResponse = &moby.NetworkCreateResponse{}
			}
			if err := m.NetworkCreateResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgedNetworkingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgedNetworkingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgedNetworkingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinuxBridges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinuxBridges = append(m.LinuxBridges, &BridgedNetworkingData_LinuxBridgeInfo{})
			if err := m.LinuxBridges[len(m.LinuxBridges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainersNetworking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainersNetworking == nil {
				m.ContainersNetworking = &BridgedNetworkingData_ContainersNetworkingInfo{}
			}
			if err := m.ContainersNetworking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VethPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthService
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.VethPairs == nil {
				m.VethPairs = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthService
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.VethPairs[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.VethPairs[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgedNetworkingData_LinkLayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkLayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkLayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLinkStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataLinkStatus = append(m.DataLinkStatus, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLinkConf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataLinkConf = append(m.DataLinkConf, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLinkFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataLinkFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLinkEtherMac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataLinkEtherMac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLinkEtherBrd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataLinkEtherBrd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLinkNetnsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataLinkNetnsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgedNetworkingData_IPAddressInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAddressInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAddressInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LinkInfo == nil {
				m.LinkInfo = &BridgedNetworkingData_LinkLayerInfo{}
			}
			if err := m.LinkInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4Mask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V4Mask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V4Info = append(m.V4Info, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4Lifetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V4Lifetime = append(m.V4Lifetime, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6Mask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V6Mask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V6Info = append(m.V6Info, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6Lifetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V6Lifetime = append(m.V6Lifetime, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgedNetworkingData_LinuxBridgeLearnedMac) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinuxBridgeLearnedMac: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinuxBridgeLearnedMac: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsLocal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgeingTimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgeingTimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgedNetworkingData_LinuxBridgeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinuxBridgeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinuxBridgeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StpEnabled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StpEnabled = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacInfo = append(m.MacInfo, &BridgedNetworkingData_LinuxBridgeLearnedMac{})
			if err := m.MacInfo[len(m.MacInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddressesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddressesInfo = append(m.IpAddressesInfo, &BridgedNetworkingData_IPAddressInfo{})
			if err := m.IpAddressesInfo[len(m.IpAddressesInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgedNetworkingData_ContainersNetworkingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainersNetworkingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainersNetworkingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkResources = append(m.NetworkResources, &moby.NetworkResource{})
			if err := m.NetworkResources[len(m.NetworkResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainersInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainersInfo = append(m.ContainersInfo, &moby.ContainerJSON{})
			if err := m.ContainersInfo[len(m.ContainersInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressesInfo = append(m.AddressesInfo, &BridgedNetworkingData_IPAddressInfo{})
			if err := m.AddressesInfo[len(m.AddressesInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthernetSniffingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthernetSniffingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthernetSniffingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsAndPackets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatsAndPackets = append(m.StatsAndPackets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 2080 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4b, 0x6f, 0x24, 0x49,
	0xf1, 0xff, 0x77, 0xb7, 0x1f, 0xdd, 0xd1, 0xee, 0xb6, 0x3b, 0xfd, 0x18, 0xbb, 0x66, 0xfe, 0x9e,
	0x99, 0x9a, 0x85, 0x1d, 0x16, 0x8d, 0xad, 0x35, 0xc6, 0xa0, 0xd1, 0x82, 0x34, 0xe3, 0x99, 0x65,
	0xbd, 0xf2, 0x78, 0x4c, 0x79, 0xb4, 0x1c, 0x90, 0x28, 0x65, 0x57, 0x65, 0xb7, 0x53, 0xae, 0xce,
	0xaa, 0xcd, 0xcc, 0xee, 0x5d, 0x83, 0x38, 0xc0, 0x6d, 0xcf, 0x2b, 0x04, 0x12, 0xdc, 0x38, 0x20,
	0x2e, 0x1c, 0x90, 0xb8, 0x71, 0x87, 0x23, 0x12, 0x5f, 0x00, 0x0d, 0x1c, 0x39, 0xf2, 0x01, 0x50,
	0x3e, 0xea, 0xd5, 0x5d, 0x1e, 0xc3, 0xca, 0xe2, 0xd4, 0x5d, 0x11, 0xbf, 0x8c, 0xc8, 0x78, 0x64,
	0x44, 0x64, 0xc2, 0x4a, 0xd2, 0xdf, 0x15, 0x84, 0x4f, 0x68, 0x40, 0x76, 0x12, 0x1e, 0xcb, 0x18,
	0xd5, 0x93, 0xbe, 0x73, 0x67, 0x18, 0xc7, 0xc3, 0x88, 0xec, 0xe2, 0x84, 0xee, 0x62, 0xc6, 0x62,
	0x89, 0x25, 0x8d, 0x99, 0x30, 0x08, 0xa7, 0x97, 0xf4, 0x77, 0x47, 0x71, 0xff, 0x52, 0xb1, 0x0d,
	0xc9, 0x7d, 0x00, 0xed, 0xe7, 0xc1, 0x79, 0xfc, 0x82, 0x08, 0x81, 0x87, 0x04, 0xad, 0xc1, 0xfc,
	0x04, 0x47, 0x63, 0xb2, 0x59, 0xbb, 0x57, 0x7b, 0xd8, 0xf2, 0xcc, 0x87, 0xfb, 0x09, 0xa0, 0x23,
	0x26, 0x24, 0x1f, 0x8f, 0x08, 0x93, 0x2f, 0x88, 0xc4, 0x21, 0x96, 0x18, 0x3d, 0x80, 0x4e, 0x80,
	0x25, 0x19, 0xc6, 0xfc, 0xd2, 0x67, 0x78, 0x94, 0xae, 0x59, 0x4a, 0x89, 0x27, 0x78, 0x44, 0xd0,
	0xff, 0x03, 0x04, 0x11, 0x16, 0xc2, 0x20, 0xea, 0x1a, 0xd1, 0xd2, 0x94, 0x94, 0x3d, 0xa0, 0x24,
	0x0a, 0x0d, 0xbb, 0x61, 0xd8, 0x9a, 0xa2, 0xd8, 0xee, 0x1f, 0xea, 0xd0, 0x79, 0x16, 0x07, 0x17,
	0x84, 0x7b, 0x63, 0xf6, 0x4c, 0x29, 0x7d, 0x0b, 0x16, 0x82, 0x98, 0x0d, 0xe8, 0x50, 0x6b, 0x6b,
	0xef, 0x2d, 0xed, 0x28, 0x83, 0x76, 0x0e, 0x35, 0xcd, 0xb3, 0x3c, 0xf4, 0x2e, 0xb4, 0xcf, 0x63,
	0x21, 0x7d, 0x0b, 0xad, 0x6b, 0xe8, 0x8a, 0x81, 0x7e, 0x10, 0x0b, 0x69, 0xe1, 0x70, 0x9e, 0xfd,
	0x47, 0xdf, 0x82, 0x2e, 0x23, 0xf2, 0x93, 0x98, 0x5f, 0xa4, 0xab, 0x1a, 0x7a, 0xd5, 0x86, 0x59,
	0x75, 0x62, 0x78, 0x94, 0x0d, 0xed, 0xda, 0x8e, 0x45, 0xdb, 0xe5, 0x5f, 0x82, 0x6e, 0x10, 0x33,
	0x89, 0x29, 0x23, 0xdc, 0x18, 0x33, 0xa7, 0x8d, 0xe9, 0x64, 0xd4, 0xd4, 0x5e, 0x21, 0xb1, 0x24,
	0x7e, 0x10, 0x87, 0x64, 0x73, 0xfe, 0x5e, 0xed, 0xe1, 0xbc, 0xd7, 0xd2, 0x94, 0xc3, 0x38, 0x24,
	0xca, 0xa5, 0x86, 0x3d, 0x32, 0xf1, 0xd8, 0x5c, 0x30, 0x2e, 0xd5, 0xc4, 0x34, 0x46, 0xf7, 0x61,
	0x29, 0x57, 0x45, 0xc3, 0xcd, 0x45, 0x8d, 0x69, 0x67, 0xb4, 0xa3, 0xd0, 0xfd, 0x5d, 0x0d, 0xba,
	0xc6, 0x6f, 0xa7, 0xe3, 0x28, 0xd2, 0x8e, 0x5b, 0x83, 0x79, 0x3a, 0x52, 0x22, 0x6d, 0x64, 0xf5,
	0xc7, 0xd4, 0x7e, 0xea, 0xd7, 0xee, 0xa7, 0x51, 0xb1, 0x9f, 0x2d, 0x68, 0x6a, 0x61, 0x6a, 0x2f,
	0xc6, 0xe8, 0x45, 0xfd, 0x7d, 0x14, 0xa2, 0xb7, 0x61, 0x39, 0xe1, 0xf1, 0x90, 0x13, 0x21, 0x7c,
	0x4e, 0x92, 0x98, 0x4b, 0x6d, 0x73, 0xcb, 0xeb, 0xa6, 0x64, 0x4f, 0x53, 0xdd, 0x3f, 0xd5, 0xc0,
	0xb1, 0x1b, 0xe6, 0x71, 0x40, 0x84, 0x38, 0x93, 0x58, 0x8e, 0x85, 0x47, 0x3e, 0xf6, 0x88, 0x48,
	0xd0, 0x3e, 0x2c, 0xc6, 0x89, 0xce, 0x64, 0x1b, 0x76, 0x27, 0x0b, 0xbb, 0xb1, 0xf9, 0x98, 0x0a,
	0xf9, 0xd2, 0x20, 0xbc, 0x14, 0x8a, 0x76, 0x01, 0x32, 0xa7, 0x88, 0xcd, 0xfa, 0xbd, 0xc6, 0xc3,
	0xf6, 0xde, 0xf2, 0xd4, 0x42, 0xaf, 0x00, 0x99, 0xf2, 0x46, 0xe3, 0x5a, 0x6f, 0xcc, 0xcd, 0x7a,
	0xc3, 0xfd, 0x65, 0x0d, 0xb6, 0x8c, 0x25, 0x99, 0x8e, 0x23, 0x26, 0x12, 0x12, 0xa8, 0x3d, 0xa1,
	0xc7, 0xc5, 0x34, 0xa1, 0x6c, 0x10, 0x5b, 0x7b, 0x56, 0xa7, 0xb6, 0xf5, 0xe1, 0xd9, 0xcb, 0x93,
	0x42, 0xee, 0x1c, 0xb1, 0x41, 0x7c, 0x13, 0xb1, 0x72, 0x7f, 0x5b, 0x87, 0xde, 0x29, 0x8f, 0x27,
	0x54, 0xd0, 0x98, 0x51, 0x36, 0x14, 0x3a, 0x37, 0x10, 0xcc, 0x15, 0x0e, 0xb0, 0xfe, 0x8f, 0xee,
	0x40, 0x4b, 0xfd, 0x8a, 0x04, 0x07, 0xd9, 0xb9, 0xcd, 0x08, 0xe8, 0x31, 0x34, 0x47, 0xb6, 0x0e,
	0xd8, 0x73, 0xb2, 0xbd, 0x93, 0xf4, 0x77, 0x66, 0x44, 0xef, 0xa4, 0xd5, 0xc2, 0xcb, 0xf0, 0xe8,
	0x1b, 0xd0, 0x49, 0x8a, 0xb8, 0xcd, 0x39, 0x1d, 0x99, 0x9e, 0x12, 0x50, 0x3a, 0xec, 0x5e, 0x19,
	0xe7, 0x8c, 0xa0, 0xf9, 0xbf, 0x2c, 0x3e, 0xff, 0xaa, 0x41, 0x4f, 0x95, 0x3d, 0xcc, 0x24, 0xd5,
	0x65, 0xf4, 0x0b, 0xfa, 0x6a, 0x6f, 0xc6, 0x57, 0x1b, 0xca, 0xd4, 0xd9, 0x8a, 0x5a, 0xf0, 0xd1,
	0xd7, 0xa1, 0x43, 0x8b, 0xaa, 0xad, 0x8f, 0x66, 0xb2, 0xb7, 0x8c, 0xba, 0x89, 0xf2, 0xe2, 0x7e,
	0xde, 0x80, 0x0d, 0x8f, 0x0c, 0xa9, 0x90, 0xfc, 0x52, 0x9d, 0x4e, 0x41, 0x65, 0xcc, 0x2f, 0xb5,
	0xed, 0x87, 0x00, 0xdc, 0x70, 0x28, 0x51, 0x27, 0x51, 0x6d, 0xe9, 0x81, 0xb2, 0xa5, 0x1a, 0x9f,
	0x93, 0x0b, 0xcb, 0x6e, 0x22, 0x8d, 0x9d, 0x2d, 0x68, 0xbc, 0xc2, 0xc3, 0xaa, 0x58, 0x38, 0xdf,
	0x85, 0xc5, 0x43, 0x2c, 0x71, 0x14, 0x57, 0xb2, 0xd1, 0x1e, 0xcc, 0x49, 0x3c, 0x4c, 0xab, 0xc1,
	0xf6, 0x1b, 0x36, 0xff, 0x0a, 0x0f, 0x3d, 0x8d, 0x75, 0x7e, 0x52, 0x83, 0x66, 0x0a, 0xaa, 0x14,
	0xfa, 0x6d, 0x68, 0x06, 0x46, 0x67, 0x2a, 0xd8, 0x7d, 0x83, 0x60, 0xbb, 0x3d, 0x2f, 0x5b, 0xa3,
	0x2a, 0xba, 0x8c, 0x84, 0x1f, 0x52, 0x81, 0xfb, 0x11, 0x09, 0xb5, 0xc9, 0x4d, 0xaf, 0x2d, 0x23,
	0xf1, 0xcc, 0x92, 0xdc, 0xef, 0x43, 0xef, 0x48, 0x15, 0xd5, 0x54, 0xa6, 0x8e, 0x47, 0x17, 0xea,
	0x34, 0xb4, 0x3b, 0xa9, 0xd3, 0x10, 0x1d, 0xc0, 0x92, 0x75, 0xb4, 0x49, 0x1a, 0xd3, 0xf7, 0x90,
	0x49, 0x1a, 0xbd, 0xfc, 0x6c, 0x3c, 0x1a, 0x61, 0x7e, 0xe9, 0x95, 0x70, 0xee, 0x47, 0xb0, 0xa2,
	0xb9, 0x4f, 0x78, 0x70, 0x4e, 0x27, 0xa4, 0x52, 0xf6, 0x1e, 0x00, 0xcd, 0xea, 0x58, 0x85, 0x64,
	0x5b, 0xe4, 0xbc, 0x02, 0xca, 0xfd, 0x4d, 0x0d, 0x96, 0xce, 0x08, 0xe6, 0xc1, 0xb9, 0x47, 0xc4,
	0x38, 0x92, 0x36, 0xf6, 0xdc, 0x0f, 0xe2, 0x31, 0x93, 0x5a, 0xb8, 0x89, 0x3d, 0x3f, 0x54, 0x04,
	0x74, 0x17, 0xda, 0x54, 0xf8, 0xf1, 0x60, 0x40, 0x03, 0x8a, 0x23, 0xad, 0xa4, 0xe9, 0x01, 0x15,
	0x2f, 0x2d, 0x25, 0x73, 0x7e, 0xa3, 0xe0, 0xfc, 0xfb, 0xb0, 0x44, 0x85, 0x8f, 0xc7, 0x32, 0x1e,
	0x61, 0x49, 0x4c, 0x0b, 0x6a, 0x7a, 0x6d, 0x2a, 0x9e, 0xa4, 0x24, 0x74, 0x0f, 0xda, 0x21, 0x11,
	0x01, 0xa7, 0xba, 0x31, 0xd8, 0x16, 0x54, 0x24, 0xa9, 0xaa, 0xdd, 0x33, 0xb5, 0xc7, 0x36, 0x7a,
	0xed, 0x83, 0xa7, 0xd0, 0x4b, 0x67, 0x02, 0x4e, 0x44, 0x3c, 0xe6, 0x41, 0x96, 0xf6, 0xeb, 0xa5,
	0xb1, 0xc0, 0xb3, 0x5c, 0x6f, 0x85, 0x95, 0x09, 0x37, 0x92, 0xee, 0xee, 0x67, 0x75, 0xb8, 0x53,
	0xda, 0xdd, 0x21, 0x27, 0x3a, 0x72, 0x69, 0x7f, 0x3c, 0x85, 0x8d, 0x6c, 0x78, 0x51, 0x2c, 0xe2,
	0x73, 0xf2, 0xf1, 0x98, 0x08, 0x59, 0x6e, 0x97, 0xc5, 0xd5, 0xc4, 0x33, 0x08, 0x6f, 0x8d, 0x55,
	0x50, 0xd1, 0x19, 0xdc, 0x9a, 0x91, 0x28, 0x92, 0x98, 0x09, 0x62, 0x63, 0x7f, 0xbb, 0x52, 0xa4,
	0x81, 0x78, 0xeb, 0xac, 0x8a, 0x7c, 0x23, 0xfd, 0xf5, 0x67, 0x1d, 0x58, 0x7f, 0xca, 0x69, 0x38,
	0x24, 0x61, 0x3e, 0x93, 0xe9, 0x68, 0x9d, 0x40, 0x27, 0xa2, 0x6c, 0xfc, 0xa9, 0xdf, 0xd7, 0xec,
	0x34, 0x52, 0x5f, 0x51, 0x47, 0xb1, 0x72, 0xc5, 0xce, 0xb1, 0x82, 0x1b, 0x96, 0xea, 0xb0, 0xde,
	0x52, 0x94, 0x13, 0x04, 0x1a, 0xc2, 0x7a, 0x3e, 0x1b, 0xf8, 0x2c, 0x5b, 0x6a, 0x1d, 0xb0, 0x77,
	0xb5, 0xdc, 0xac, 0x3e, 0x8b, 0x9c, 0xa1, 0x15, 0xac, 0x05, 0x15, 0x1c, 0xf4, 0x1d, 0x80, 0x09,
	0x91, 0xe7, 0x7e, 0x82, 0x29, 0x17, 0x9b, 0x0d, 0xbd, 0xeb, 0x87, 0x57, 0x4b, 0xff, 0x88, 0xc8,
	0xf3, 0x53, 0x05, 0x7d, 0xce, 0x54, 0x71, 0x69, 0x4d, 0xd2, 0xef, 0x29, 0xff, 0xce, 0x5d, 0xeb,
	0xdf, 0xf9, 0x8a, 0xd2, 0xfa, 0xc7, 0x3a, 0x74, 0x8e, 0x29, 0xbb, 0x38, 0xc6, 0x97, 0x76, 0xee,
	0x50, 0x93, 0x23, 0x0b, 0xc9, 0xa7, 0xd9, 0xe4, 0xa8, 0x3e, 0xb2, 0xa3, 0x58, 0x2f, 0x1c, 0xc5,
	0x87, 0xb0, 0xa2, 0xba, 0x97, 0x1f, 0x51, 0x76, 0xe1, 0x0b, 0x3d, 0xc1, 0x69, 0x73, 0x5a, 0x5e,
	0x57, 0xd1, 0x95, 0x58, 0x33, 0xd7, 0xa1, 0xb7, 0xa0, 0x9b, 0x23, 0xd5, 0xbc, 0xad, 0x1b, 0x5c,
	0xcb, 0x5b, 0x4a, 0x71, 0x6a, 0xac, 0x46, 0x5f, 0x86, 0xe5, 0x1c, 0x35, 0xe0, 0x4a, 0x9d, 0xd9,
	0x72, 0x27, 0x85, 0xbd, 0xaf, 0x88, 0xe8, 0x11, 0xac, 0xe6, 0x38, 0x22, 0xcf, 0x09, 0xf7, 0x47,
	0x38, 0xb0, 0xdd, 0x6d, 0x25, 0xc5, 0x3e, 0x57, 0x8c, 0x17, 0x38, 0xa8, 0x82, 0xf7, 0x79, 0x3a,
	0x47, 0x97, 0xe1, 0x4f, 0x79, 0x88, 0xbe, 0x0a, 0x28, 0x87, 0x33, 0x22, 0x99, 0x50, 0x93, 0x6e,
	0x53, 0xa3, 0x97, 0x53, 0xf4, 0x89, 0xa2, 0x1f, 0x85, 0xce, 0xaf, 0xeb, 0xd0, 0x39, 0x3a, 0x7d,
	0x12, 0x86, 0x6a, 0xb8, 0xd5, 0xee, 0x7b, 0x06, 0x2d, 0xbd, 0xb2, 0x30, 0xed, 0xbd, 0xfd, 0xc6,
	0x94, 0xcc, 0x5d, 0xef, 0x35, 0xd5, 0x4a, 0x2d, 0x05, 0xc1, 0x1c, 0x4d, 0x26, 0xfb, 0xa9, 0xbb,
	0xd5, 0x7f, 0x74, 0x0b, 0x16, 0x27, 0xfb, 0xfe, 0x08, 0x8b, 0x0b, 0x5b, 0x35, 0x16, 0x26, 0xfb,
	0x2f, 0xb0, 0xb8, 0xb0, 0x0c, 0xad, 0xd0, 0xb8, 0x75, 0x61, 0xb2, 0xaf, 0xa5, 0xdc, 0x85, 0xf6,
	0x64, 0xdf, 0x8f, 0xe8, 0x80, 0x48, 0xaa, 0x9d, 0xa9, 0x98, 0x30, 0xd9, 0x3f, 0xb6, 0x14, 0xab,
	0xe6, 0xc0, 0xba, 0x4e, 0xff, 0xd7, 0xd2, 0x0e, 0x8c, 0x9a, 0x45, 0xab, 0xe6, 0x20, 0x53, 0x73,
	0x60, 0xd4, 0x34, 0xad, 0x9a, 0x83, 0x4c, 0xcd, 0x41, 0xae, 0xa6, 0x65, 0xd5, 0x1c, 0xa4, 0x6a,
	0x9c, 0xcf, 0x6a, 0xb0, 0x5e, 0x38, 0x7c, 0xc7, 0x04, 0x73, 0x46, 0x42, 0x15, 0x9b, 0x5b, 0xb0,
	0xa8, 0x2e, 0x04, 0x3e, 0x8b, 0x6d, 0xba, 0x2d, 0xa8, 0xcf, 0x93, 0x58, 0xdd, 0x32, 0x46, 0x38,
	0xf0, 0x71, 0x18, 0x72, 0xeb, 0x84, 0xc5, 0x11, 0x0e, 0x94, 0xa3, 0xf5, 0x05, 0x44, 0xf8, 0x51,
	0x1c, 0xe0, 0xc8, 0x3a, 0x62, 0x91, 0x8a, 0x63, 0xf5, 0xa9, 0x9a, 0x03, 0x1e, 0x12, 0xca, 0x86,
	0xbe, 0xd2, 0xcb, 0x6d, 0x45, 0x69, 0x1b, 0xda, 0x2b, 0x45, 0x72, 0x7e, 0x5e, 0x87, 0xe5, 0xa9,
	0x42, 0x30, 0xd3, 0xfc, 0xaa, 0x92, 0xfd, 0x2e, 0xb4, 0x85, 0x4c, 0x7c, 0xc2, 0xf2, 0x9e, 0xdd,
	0xf2, 0x40, 0xc8, 0xe4, 0xb9, 0xa1, 0xa0, 0x6d, 0xd5, 0x31, 0x25, 0xe1, 0x03, 0xac, 0xda, 0x86,
	0x09, 0x44, 0x81, 0x82, 0x3e, 0x34, 0x16, 0x69, 0xff, 0xcd, 0xeb, 0x43, 0xbf, 0xfb, 0x1f, 0x95,
	0xaa, 0xdc, 0x5b, 0xda, 0x05, 0x7a, 0xc3, 0x67, 0xd0, 0xa3, 0x89, 0x76, 0x0e, 0x11, 0x82, 0x08,
	0x23, 0x74, 0x41, 0x0b, 0x7d, 0x43, 0xb2, 0x95, 0x12, 0xd5, 0x5b, 0xa6, 0xc9, 0x93, 0x54, 0x80,
	0x22, 0x38, 0xff, 0xac, 0xc1, 0xe6, 0x55, 0xa5, 0xec, 0x46, 0x7a, 0xe3, 0x7b, 0xb0, 0x5c, 0xa8,
	0xb0, 0x7a, 0xcf, 0x66, 0x7c, 0xaa, 0xbc, 0x0e, 0xe5, 0x37, 0x27, 0x73, 0xb0, 0x4e, 0xa0, 0x3b,
	0x65, 0x70, 0xe3, 0xbf, 0x33, 0xb8, 0x83, 0x4b, 0xe6, 0xbe, 0x07, 0xdd, 0x72, 0x69, 0x45, 0x2b,
	0xd0, 0xb8, 0x20, 0x97, 0x36, 0x0f, 0xd4, 0xdf, 0xfc, 0x7d, 0xa4, 0x5e, 0x78, 0x1f, 0x79, 0x5c,
	0xff, 0x66, 0xcd, 0xfd, 0x55, 0x0d, 0xd6, 0x74, 0xc9, 0x60, 0x44, 0x9e, 0x31, 0x3a, 0x18, 0xa4,
	0x6d, 0x49, 0x95, 0x4f, 0x15, 0xf0, 0xac, 0x7c, 0xaa, 0x0f, 0xf4, 0x0e, 0xf4, 0x54, 0x81, 0x14,
	0x3e, 0x66, 0xa1, 0x9f, 0xe0, 0xe0, 0x82, 0x48, 0x33, 0x3b, 0xb6, 0xbc, 0x65, 0xcd, 0x78, 0xc2,
	0xc2, 0x53, 0x43, 0xbe, 0x89, 0xb6, 0xb9, 0xf7, 0xfb, 0x96, 0x79, 0xe8, 0x39, 0x33, 0x4f, 0x46,
	0xe8, 0x29, 0xcc, 0xa9, 0x4f, 0xb4, 0xac, 0x9c, 0x55, 0x78, 0x01, 0x72, 0xa6, 0x09, 0xee, 0xe6,
	0x4f, 0xff, 0xfa, 0x8f, 0xcf, 0xeb, 0x08, 0xad, 0xec, 0x4e, 0xde, 0xdd, 0x25, 0xc1, 0x79, 0xbc,
	0xfb, 0x23, 0x6d, 0xf5, 0x8f, 0xd1, 0x07, 0xd0, 0x3a, 0x1d, 0x47, 0x91, 0x1e, 0xff, 0x10, 0xca,
	0xaf, 0x6f, 0xe9, 0x9b, 0x83, 0x53, 0x41, 0x73, 0x57, 0xb5, 0xb8, 0x8e, 0xdb, 0x54, 0xe2, 0x92,
	0x71, 0x14, 0x3d, 0xae, 0xbd, 0x83, 0x5e, 0xc2, 0x92, 0x37, 0x66, 0x59, 0xb8, 0xd1, 0xec, 0x5d,
	0xd0, 0x99, 0x25, 0xb9, 0x5b, 0x5a, 0xd4, 0xaa, 0xdb, 0x55, 0xa2, 0xf2, 0xe4, 0x50, 0x02, 0x39,
	0x2c, 0x97, 0x1e, 0x12, 0x88, 0x40, 0xdb, 0x85, 0xcd, 0x54, 0xbc, 0x31, 0x38, 0xd7, 0xf0, 0xdd,
	0xbb, 0x5a, 0xdb, 0x96, 0xbb, 0xa6, 0x37, 0x6e, 0x10, 0x8f, 0x84, 0x95, 0xae, 0x74, 0xfe, 0x00,
	0x56, 0xb3, 0xfb, 0x6f, 0x7e, 0x6c, 0xd0, 0x7a, 0xe5, 0xc5, 0xd8, 0xa9, 0x26, 0x97, 0x6d, 0xca,
	0xae, 0xbf, 0x5a, 0x7e, 0x1f, 0xd6, 0x5f, 0x11, 0x3e, 0xa2, 0x4c, 0x8f, 0x7e, 0x5f, 0x58, 0xc3,
	0x6d, 0xad, 0x61, 0xdd, 0xd5, 0xf1, 0x94, 0xb9, 0x40, 0xad, 0x23, 0x84, 0x9e, 0x47, 0x70, 0x52,
	0xba, 0xf6, 0x1a, 0xf9, 0x33, 0x37, 0x61, 0xa7, 0x9a, 0xec, 0xde, 0xd7, 0xf2, 0x6f, 0xbb, 0x1b,
	0x4a, 0x3e, 0x27, 0x38, 0x79, 0x54, 0xba, 0xa3, 0x2a, 0x2d, 0x02, 0x6e, 0x2b, 0x2d, 0xe9, 0x5d,
	0xe6, 0xfd, 0x98, 0x67, 0x57, 0x24, 0x75, 0x43, 0x74, 0xae, 0xbe, 0x3c, 0x39, 0x6f, 0xe0, 0xb9,
	0x77, 0xb4, 0xe6, 0x0d, 0xb7, 0x97, 0x69, 0xb6, 0xb7, 0x9c, 0x4b, 0xa5, 0xf4, 0x7b, 0xc6, 0xb4,
	0xd2, 0x1c, 0x6d, 0x4c, 0x9b, 0x19, 0xfc, 0x9d, 0x6a, 0xb2, 0xbb, 0xa6, 0x15, 0x74, 0xd1, 0x92,
	0x52, 0x60, 0xab, 0x99, 0x40, 0x3f, 0x84, 0x55, 0x33, 0xe7, 0x96, 0x45, 0xdf, 0x9b, 0x91, 0x31,
	0x35, 0xb5, 0x3b, 0xd7, 0x22, 0xca, 0x39, 0x67, 0x15, 0x3e, 0x0a, 0x2c, 0xc8, 0xe4, 0xf9, 0x9d,
	0x33, 0x16, 0xc7, 0x49, 0xb9, 0xdc, 0x1d, 0x63, 0x16, 0x8a, 0x00, 0x27, 0x04, 0x6d, 0x5d, 0x59,
	0x0b, 0x9d, 0xab, 0x59, 0x65, 0x47, 0x0a, 0x25, 0x9f, 0xb2, 0xe1, 0xa3, 0x3e, 0x37, 0x39, 0x72,
	0x0e, 0x6b, 0xba, 0xc0, 0xe9, 0x6a, 0x57, 0x18, 0x63, 0x37, 0x75, 0xe5, 0xa8, 0x28, 0x81, 0xce,
	0x95, 0x9c, 0x69, 0x4d, 0x86, 0x93, 0x6a, 0x7a, 0xba, 0xf2, 0xe7, 0xd7, 0xdb, 0xb5, 0xbf, 0xbc,
	0xde, 0xae, 0xfd, 0xed, 0xf5, 0x76, 0xed, 0x17, 0x7f, 0xdf, 0xfe, 0xbf, 0xfe, 0x82, 0x7e, 0xb5,
	0xfe, 0xda, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x2a, 0xa7, 0x63, 0xfe, 0x16, 0x00, 0x00,
}
