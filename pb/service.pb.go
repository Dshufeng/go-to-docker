// Code generated by protoc-gen-gogo.
// source: pb/service.proto
// DO NOT EDIT!

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pb/service.proto

	It has these top-level messages:
		EchoMessage
		DockerRunData
		DockerPullData
		ProvisioningsData
		BatchProvisioningsData
		ImageRegistryData
		ImageArchiveData
		ImageCatalogData
		SearchResult
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import moby "github.com/tangfeixiong/go-to-docker/pb/moby"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoMessage struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EchoMessage) Reset()                    { *m = EchoMessage{} }
func (m *EchoMessage) String() string            { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()               {}
func (*EchoMessage) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *EchoMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DockerRunData struct {
	Config        *moby.Config           `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	HostConfig    *moby.HostConfig       `protobuf:"bytes,2,opt,name=host_config,json=hostConfig" json:"host_config,omitempty"`
	NetworkConfig *moby.NetworkingConfig `protobuf:"bytes,3,opt,name=network_config,json=networkConfig" json:"network_config,omitempty"`
	ContainerName string                 `protobuf:"bytes,4,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	StateCode     int32                  `protobuf:"varint,5,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage  string                 `protobuf:"bytes,6,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	ContainerId   string                 `protobuf:"bytes,7,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (m *DockerRunData) Reset()                    { *m = DockerRunData{} }
func (m *DockerRunData) String() string            { return proto.CompactTextString(m) }
func (*DockerRunData) ProtoMessage()               {}
func (*DockerRunData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *DockerRunData) GetConfig() *moby.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *DockerRunData) GetHostConfig() *moby.HostConfig {
	if m != nil {
		return m.HostConfig
	}
	return nil
}

func (m *DockerRunData) GetNetworkConfig() *moby.NetworkingConfig {
	if m != nil {
		return m.NetworkConfig
	}
	return nil
}

func (m *DockerRunData) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *DockerRunData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerRunData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *DockerRunData) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type DockerPullData struct {
	Image          string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	StateCode      int32  `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage   string `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	ImageId        string `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ProgressReport string `protobuf:"bytes,5,opt,name=progress_report,json=progressReport,proto3" json:"progress_report,omitempty"`
}

func (m *DockerPullData) Reset()                    { *m = DockerPullData{} }
func (m *DockerPullData) String() string            { return proto.CompactTextString(m) }
func (*DockerPullData) ProtoMessage()               {}
func (*DockerPullData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *DockerPullData) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DockerPullData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *DockerPullData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *DockerPullData) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *DockerPullData) GetProgressReport() string {
	if m != nil {
		return m.ProgressReport
	}
	return ""
}

type ProvisioningsData struct {
	Name          string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                      `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Metadata      *ProvisioningsData_Metadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	Provisionings []*DockerRunData            `protobuf:"bytes,4,rep,name=provisionings" json:"provisionings,omitempty"`
}

func (m *ProvisioningsData) Reset()                    { *m = ProvisioningsData{} }
func (m *ProvisioningsData) String() string            { return proto.CompactTextString(m) }
func (*ProvisioningsData) ProtoMessage()               {}
func (*ProvisioningsData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

func (m *ProvisioningsData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProvisioningsData) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProvisioningsData) GetMetadata() *ProvisioningsData_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProvisioningsData) GetProvisionings() []*DockerRunData {
	if m != nil {
		return m.Provisionings
	}
	return nil
}

type ProvisioningsData_Metadata struct {
	CategoryName string `protobuf:"bytes,1,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
	ClassName    string `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	FieldName    string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (m *ProvisioningsData_Metadata) Reset()         { *m = ProvisioningsData_Metadata{} }
func (m *ProvisioningsData_Metadata) String() string { return proto.CompactTextString(m) }
func (*ProvisioningsData_Metadata) ProtoMessage()    {}
func (*ProvisioningsData_Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{3, 0}
}

func (m *ProvisioningsData_Metadata) GetCategoryName() string {
	if m != nil {
		return m.CategoryName
	}
	return ""
}

func (m *ProvisioningsData_Metadata) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *ProvisioningsData_Metadata) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

type BatchProvisioningsData struct {
	Provisions []*ProvisioningsData `protobuf:"bytes,1,rep,name=provisions" json:"provisions,omitempty"`
}

func (m *BatchProvisioningsData) Reset()                    { *m = BatchProvisioningsData{} }
func (m *BatchProvisioningsData) String() string            { return proto.CompactTextString(m) }
func (*BatchProvisioningsData) ProtoMessage()               {}
func (*BatchProvisioningsData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

func (m *BatchProvisioningsData) GetProvisions() []*ProvisioningsData {
	if m != nil {
		return m.Provisions
	}
	return nil
}

type ImageRegistryData struct {
	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Registration *moby.ImageSummary `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
}

func (m *ImageRegistryData) Reset()                    { *m = ImageRegistryData{} }
func (m *ImageRegistryData) String() string            { return proto.CompactTextString(m) }
func (*ImageRegistryData) ProtoMessage()               {}
func (*ImageRegistryData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{5} }

func (m *ImageRegistryData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageRegistryData) GetRegistration() *moby.ImageSummary {
	if m != nil {
		return m.Registration
	}
	return nil
}

type ImageArchiveData struct {
	Id         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Inspection *moby.ImageInspect `protobuf:"bytes,2,opt,name=inspection" json:"inspection,omitempty"`
}

func (m *ImageArchiveData) Reset()                    { *m = ImageArchiveData{} }
func (m *ImageArchiveData) String() string            { return proto.CompactTextString(m) }
func (*ImageArchiveData) ProtoMessage()               {}
func (*ImageArchiveData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{6} }

func (m *ImageArchiveData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageArchiveData) GetInspection() *moby.ImageInspect {
	if m != nil {
		return m.Inspection
	}
	return nil
}

type ImageCatalogData struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace    string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Category     string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Subject      string `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	Image        string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	StateCode    int32  `protobuf:"varint,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage string `protobuf:"bytes,8,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *ImageCatalogData) Reset()                    { *m = ImageCatalogData{} }
func (m *ImageCatalogData) String() string            { return proto.CompactTextString(m) }
func (*ImageCatalogData) ProtoMessage()               {}
func (*ImageCatalogData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{7} }

func (m *ImageCatalogData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageCatalogData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageCatalogData) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ImageCatalogData) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ImageCatalogData) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *ImageCatalogData) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ImageCatalogData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *ImageCatalogData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

// SearchResult describes a search result returned from a registry
// to see https://github.com/moby/moby/blob/master/api/types/registry/registry.go
type SearchResult struct {
	// StarCount indicates the number of stars this repository has
	StarCount int32 `protobuf:"varint,1,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
	// IsOfficial is true if the result is from an official repository.
	IsOfficial bool `protobuf:"varint,2,opt,name=is_official,json=isOfficial,proto3" json:"is_official,omitempty"`
	// Name is the name of the repository
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// IsAutomated indicates whether the result is automated
	IsAutomated bool `protobuf:"varint,4,opt,name=is_automated,json=isAutomated,proto3" json:"is_automated,omitempty"`
	// Description is a textual description of the repository
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{8} }

func (m *SearchResult) GetStarCount() int32 {
	if m != nil {
		return m.StarCount
	}
	return 0
}

func (m *SearchResult) GetIsOfficial() bool {
	if m != nil {
		return m.IsOfficial
	}
	return false
}

func (m *SearchResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchResult) GetIsAutomated() bool {
	if m != nil {
		return m.IsAutomated
	}
	return false
}

func (m *SearchResult) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoMessage)(nil), "pb.EchoMessage")
	proto.RegisterType((*DockerRunData)(nil), "pb.DockerRunData")
	proto.RegisterType((*DockerPullData)(nil), "pb.DockerPullData")
	proto.RegisterType((*ProvisioningsData)(nil), "pb.ProvisioningsData")
	proto.RegisterType((*ProvisioningsData_Metadata)(nil), "pb.ProvisioningsData.Metadata")
	proto.RegisterType((*BatchProvisioningsData)(nil), "pb.BatchProvisioningsData")
	proto.RegisterType((*ImageRegistryData)(nil), "pb.ImageRegistryData")
	proto.RegisterType((*ImageArchiveData)(nil), "pb.ImageArchiveData")
	proto.RegisterType((*ImageCatalogData)(nil), "pb.ImageCatalogData")
	proto.RegisterType((*SearchResult)(nil), "pb.SearchResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EchoService service

type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	// Like 'docker pull' command
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "image": "tomcat:8"
	// }
	PullImage(ctx context.Context, in *DockerPullData, opts ...grpc.CallOption) (*DockerPullData, error)
	// Like 'docker run' command
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "config":
	//     {
	//       "image": "nginx",
	//       "exposed_ports":
	//         {
	//           "value": "webui"
	//         }
	//     },
	//   "host_config":
	//     {
	//       "port_bindings":
	//         {
	//           "value":
	//             {
	//               "80":
	//                 {
	//                   "host_port": "80"
	//                 }
	//             }
	//         }
	//     },
	//   "network_config":
	//     {
	//     },
	//   "container_name": "nginx"
	// }
	// And returning information append this object for output:
	// {
	//   "state_code": 0,  // succeeded, otherwise none zero
	//   "state_message": "if failed, provide error information",
	//   "container_id": "regturned from docker engine"
	// }
	RunContainer(ctx context.Context, in *DockerRunData, opts ...grpc.CallOption) (*DockerRunData, error)
	// Run containers with same user namespace information
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "basic-web-security",
	//       "class_name": "http-protocol"
	//       "field_name": "http-method"
	//     },
	//   "provisionings": [
	//     list of DockerRunData type, see previous
	//   ]
	// }
	ProvisionContainers(ctx context.Context, in *ProvisioningsData, opts ...grpc.CallOption) (*ProvisioningsData, error)
	// Delete containers with same user namespace information
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "basic-web-security",
	//       "class_name": "http-protocol"
	//       "field_name": "http-method"
	//     },
	// }
	// And returning information append this object for output:
	// {
	//   "provisionings": [
	//     list of DockerRunData type, see previous
	//   ]
	// }
	TerminationContainers(ctx context.Context, in *ProvisioningsData, opts ...grpc.CallOption) (*ProvisioningsData, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := grpc.Invoke(ctx, "/pb.EchoService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) PullImage(ctx context.Context, in *DockerPullData, opts ...grpc.CallOption) (*DockerPullData, error) {
	out := new(DockerPullData)
	err := grpc.Invoke(ctx, "/pb.EchoService/PullImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) RunContainer(ctx context.Context, in *DockerRunData, opts ...grpc.CallOption) (*DockerRunData, error) {
	out := new(DockerRunData)
	err := grpc.Invoke(ctx, "/pb.EchoService/RunContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ProvisionContainers(ctx context.Context, in *ProvisioningsData, opts ...grpc.CallOption) (*ProvisioningsData, error) {
	out := new(ProvisioningsData)
	err := grpc.Invoke(ctx, "/pb.EchoService/ProvisionContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) TerminationContainers(ctx context.Context, in *ProvisioningsData, opts ...grpc.CallOption) (*ProvisioningsData, error) {
	out := new(ProvisioningsData)
	err := grpc.Invoke(ctx, "/pb.EchoService/TerminationContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EchoService service

type EchoServiceServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	// Like 'docker pull' command
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "image": "tomcat:8"
	// }
	PullImage(context.Context, *DockerPullData) (*DockerPullData, error)
	// Like 'docker run' command
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "config":
	//     {
	//       "image": "nginx",
	//       "exposed_ports":
	//         {
	//           "value": "webui"
	//         }
	//     },
	//   "host_config":
	//     {
	//       "port_bindings":
	//         {
	//           "value":
	//             {
	//               "80":
	//                 {
	//                   "host_port": "80"
	//                 }
	//             }
	//         }
	//     },
	//   "network_config":
	//     {
	//     },
	//   "container_name": "nginx"
	// }
	// And returning information append this object for output:
	// {
	//   "state_code": 0,  // succeeded, otherwise none zero
	//   "state_message": "if failed, provide error information",
	//   "container_id": "regturned from docker engine"
	// }
	RunContainer(context.Context, *DockerRunData) (*DockerRunData, error)
	// Run containers with same user namespace information
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "basic-web-security",
	//       "class_name": "http-protocol"
	//       "field_name": "http-method"
	//     },
	//   "provisionings": [
	//     list of DockerRunData type, see previous
	//   ]
	// }
	ProvisionContainers(context.Context, *ProvisioningsData) (*ProvisioningsData, error)
	// Delete containers with same user namespace information
	//
	// Input/Output is a same protobuf/json object. For input:
	// {
	//   "name": "fighter and target"
	//   "namespace": "default"
	//   "metadata":
	//     {
	//       "categroy_name": "basic-web-security",
	//       "class_name": "http-protocol"
	//       "field_name": "http-method"
	//     },
	// }
	// And returning information append this object for output:
	// {
	//   "provisionings": [
	//     list of DockerRunData type, see previous
	//   ]
	// }
	TerminationContainers(context.Context, *ProvisioningsData) (*ProvisioningsData, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_PullImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerPullData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).PullImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/PullImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).PullImage(ctx, req.(*DockerPullData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_RunContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerRunData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).RunContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/RunContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).RunContainer(ctx, req.(*DockerRunData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ProvisionContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisioningsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).ProvisionContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/ProvisionContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).ProvisionContainers(ctx, req.(*ProvisioningsData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_TerminationContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisioningsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).TerminationContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EchoService/TerminationContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).TerminationContainers(ctx, req.(*ProvisioningsData))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "PullImage",
			Handler:    _EchoService_PullImage_Handler,
		},
		{
			MethodName: "RunContainer",
			Handler:    _EchoService_RunContainer_Handler,
		},
		{
			MethodName: "ProvisionContainers",
			Handler:    _EchoService_ProvisionContainers_Handler,
		},
		{
			MethodName: "TerminationContainers",
			Handler:    _EchoService_TerminationContainers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}

func (m *EchoMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *DockerRunData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerRunData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Config.Size()))
		n1, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.HostConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.HostConfig.Size()))
		n2, err := m.HostConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.NetworkConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NetworkConfig.Size()))
		n3, err := m.NetworkConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.ContainerName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ContainerName)))
		i += copy(dAtA[i:], m.ContainerName)
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if len(m.ContainerId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ContainerId)))
		i += copy(dAtA[i:], m.ContainerId)
	}
	return i, nil
}

func (m *DockerPullData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerPullData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if len(m.ImageId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ImageId)))
		i += copy(dAtA[i:], m.ImageId)
	}
	if len(m.ProgressReport) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ProgressReport)))
		i += copy(dAtA[i:], m.ProgressReport)
	}
	return i, nil
}

func (m *ProvisioningsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvisioningsData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.Metadata != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Metadata.Size()))
		n4, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Provisionings) > 0 {
		for _, msg := range m.Provisionings {
			dAtA[i] = 0x22
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProvisioningsData_Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvisioningsData_Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CategoryName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.CategoryName)))
		i += copy(dAtA[i:], m.CategoryName)
	}
	if len(m.ClassName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ClassName)))
		i += copy(dAtA[i:], m.ClassName)
	}
	if len(m.FieldName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.FieldName)))
		i += copy(dAtA[i:], m.FieldName)
	}
	return i, nil
}

func (m *BatchProvisioningsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchProvisioningsData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Provisions) > 0 {
		for _, msg := range m.Provisions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ImageRegistryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRegistryData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Registration != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Registration.Size()))
		n5, err := m.Registration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ImageArchiveData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageArchiveData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Inspection != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Inspection.Size()))
		n6, err := m.Inspection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ImageCatalogData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageCatalogData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if len(m.Subject) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *SearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StarCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StarCount))
	}
	if m.IsOfficial {
		dAtA[i] = 0x10
		i++
		if m.IsOfficial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.IsAutomated {
		dAtA[i] = 0x20
		i++
		if m.IsAutomated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func encodeFixed64Service(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Service(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EchoMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerRunData) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.HostConfig != nil {
		l = m.HostConfig.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.NetworkConfig != nil {
		l = m.NetworkConfig.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DockerPullData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ProgressReport)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ProvisioningsData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Provisionings) > 0 {
		for _, e := range m.Provisionings {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ProvisioningsData_Metadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.CategoryName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *BatchProvisioningsData) Size() (n int) {
	var l int
	_ = l
	if len(m.Provisions) > 0 {
		for _, e := range m.Provisions {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ImageRegistryData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Registration != nil {
		l = m.Registration.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ImageArchiveData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Inspection != nil {
		l = m.Inspection.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ImageCatalogData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovService(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SearchResult) Size() (n int) {
	var l int
	_ = l
	if m.StarCount != 0 {
		n += 1 + sovService(uint64(m.StarCount))
	}
	if m.IsOfficial {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.IsAutomated {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EchoMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerRunData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerRunData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerRunData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &moby.Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostConfig == nil {
				m.HostConfig = &moby.HostConfig{}
			}
			if err := m.HostConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkConfig == nil {
				m.NetworkConfig = &moby.NetworkingConfig{}
			}
			if err := m.NetworkConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerPullData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerPullData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerPullData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressReport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgressReport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisioningsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisioningsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisioningsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ProvisioningsData_Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provisionings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provisionings = append(m.Provisionings, &DockerRunData{})
			if err := m.Provisionings[len(m.Provisionings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisioningsData_Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchProvisioningsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchProvisioningsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchProvisioningsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provisions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provisions = append(m.Provisions, &ProvisioningsData{})
			if err := m.Provisions[len(m.Provisions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageRegistryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageRegistryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageRegistryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Registration == nil {
				m.Registration = &moby.ImageSummary{}
			}
			if err := m.Registration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageArchiveData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageArchiveData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageArchiveData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inspection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inspection == nil {
				m.Inspection = &moby.ImageInspect{}
			}
			if err := m.Inspection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageCatalogData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageCatalogData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageCatalogData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarCount", wireType)
			}
			m.StarCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOfficial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOfficial = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutomated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutomated = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x8e, 0x1b, 0x45,
	0x17, 0xfd, 0xda, 0x9e, 0x1f, 0xfb, 0xfa, 0x27, 0x9e, 0x9a, 0x4c, 0xe4, 0xf8, 0x0b, 0x66, 0xd2,
	0x01, 0x31, 0x62, 0x61, 0x2b, 0x83, 0x00, 0x29, 0x12, 0x8b, 0x8c, 0x83, 0x94, 0x59, 0x24, 0x13,
	0xf5, 0x20, 0x36, 0x48, 0x58, 0xe5, 0xea, 0x9a, 0x76, 0x91, 0xee, 0xae, 0x56, 0x55, 0xb5, 0xd1,
	0x08, 0xb1, 0xe1, 0x15, 0xd8, 0xf0, 0x06, 0x88, 0x0d, 0x62, 0xc3, 0x3b, 0xb0, 0x44, 0xe2, 0x05,
	0xd0, 0x90, 0x07, 0x41, 0x75, 0xab, 0xbb, 0xed, 0x19, 0x7b, 0x14, 0x89, 0x95, 0x5d, 0xe7, 0x9e,
	0x3a, 0x75, 0xef, 0xad, 0x7b, 0xaa, 0xa1, 0x97, 0xcd, 0xc6, 0x9a, 0xab, 0x85, 0x60, 0x7c, 0x94,
	0x29, 0x69, 0x24, 0xa9, 0x65, 0xb3, 0xc1, 0x83, 0x48, 0xca, 0x28, 0xe6, 0x63, 0x9a, 0x89, 0x31,
	0x4d, 0x53, 0x69, 0xa8, 0x11, 0x32, 0xd5, 0x8e, 0x31, 0xd8, 0xcb, 0x66, 0xe3, 0x44, 0xce, 0x2e,
	0x6d, 0xd8, 0x41, 0xfe, 0x23, 0x68, 0x7d, 0xce, 0xe6, 0xf2, 0x05, 0xd7, 0x9a, 0x46, 0x9c, 0xdc,
	0x85, 0xed, 0x05, 0x8d, 0x73, 0xde, 0xf7, 0x0e, 0xbd, 0xa3, 0x66, 0xe0, 0x16, 0xfe, 0xef, 0x35,
	0xe8, 0x3c, 0x93, 0xec, 0x35, 0x57, 0x41, 0x9e, 0x3e, 0xa3, 0x86, 0x92, 0xf7, 0x60, 0x87, 0xc9,
	0xf4, 0x42, 0x44, 0x48, 0x6c, 0x1d, 0xb7, 0x47, 0x56, 0x77, 0x34, 0x41, 0x2c, 0x28, 0x62, 0xe4,
	0x31, 0xb4, 0xe6, 0x52, 0x9b, 0x69, 0x41, 0xad, 0x21, 0xb5, 0xe7, 0xa8, 0xcf, 0xa5, 0x36, 0x05,
	0x1d, 0xe6, 0xd5, 0x7f, 0xf2, 0x19, 0x74, 0x53, 0x6e, 0xbe, 0x95, 0xea, 0x75, 0xb9, 0xab, 0x8e,
	0xbb, 0xee, 0xb9, 0x5d, 0x2f, 0x5d, 0x4c, 0xa4, 0x51, 0xb1, 0xb7, 0x53, 0xb0, 0x8b, 0xed, 0xef,
	0x43, 0x97, 0xc9, 0xd4, 0x50, 0x91, 0x72, 0x35, 0x4d, 0x69, 0xc2, 0xfb, 0x5b, 0x58, 0x48, 0xa7,
	0x42, 0x5f, 0xd2, 0x84, 0x93, 0x77, 0x00, 0xb4, 0xa1, 0x86, 0x4f, 0x99, 0x0c, 0x79, 0x7f, 0xfb,
	0xd0, 0x3b, 0xda, 0x0e, 0x9a, 0x88, 0x4c, 0x64, 0xc8, 0xc9, 0x23, 0xe8, 0xb8, 0x70, 0xe2, 0xda,
	0xd2, 0xdf, 0x41, 0x91, 0x36, 0x82, 0x65, 0xab, 0x1e, 0x42, 0x7b, 0x79, 0x94, 0x08, 0xfb, 0xbb,
	0xc8, 0x69, 0x55, 0xd8, 0x69, 0xe8, 0xff, 0xea, 0x41, 0xd7, 0xf5, 0xed, 0x55, 0x1e, 0xc7, 0xd8,
	0xb8, 0xbb, 0xb0, 0x2d, 0x12, 0x2b, 0x59, 0x34, 0x18, 0x17, 0x37, 0xf2, 0xa9, 0xbd, 0x35, 0x9f,
	0xfa, 0x86, 0x7c, 0xee, 0x43, 0x03, 0xc5, 0x6c, 0x2e, 0xae, 0xe8, 0x5d, 0x5c, 0x9f, 0x86, 0xe4,
	0x03, 0xb8, 0x93, 0x29, 0x19, 0x29, 0xae, 0xf5, 0x54, 0xf1, 0x4c, 0x2a, 0x83, 0x35, 0x37, 0x83,
	0x6e, 0x09, 0x07, 0x88, 0xfa, 0xbf, 0xd4, 0x60, 0xef, 0x95, 0x92, 0x0b, 0xa1, 0x85, 0x4c, 0x45,
	0x1a, 0x69, 0xcc, 0x99, 0xc0, 0x16, 0xb6, 0xd2, 0xa5, 0x8c, 0xff, 0xc9, 0x03, 0x68, 0xda, 0x5f,
	0x9d, 0x51, 0xe6, 0x12, 0x6e, 0x06, 0x4b, 0x80, 0x3c, 0x81, 0x46, 0xc2, 0x0d, 0x0d, 0xa9, 0xa1,
	0xc5, 0xfd, 0x0d, 0x47, 0xd9, 0x6c, 0xb4, 0x26, 0x3d, 0x7a, 0x51, 0xb0, 0x82, 0x8a, 0x4f, 0x3e,
	0x85, 0x4e, 0xb6, 0xca, 0xeb, 0x6f, 0x1d, 0xd6, 0x8f, 0x5a, 0xc7, 0x7b, 0x56, 0xe0, 0xda, 0x10,
	0x06, 0xd7, 0x79, 0x83, 0x04, 0x1a, 0xa5, 0x9c, 0xed, 0x18, 0xa3, 0x86, 0x47, 0x52, 0x5d, 0x4e,
	0x57, 0x72, 0x6f, 0x97, 0x60, 0x39, 0x05, 0x2c, 0xa6, 0x5a, 0x3b, 0x46, 0x51, 0x04, 0x22, 0x65,
	0xf8, 0x42, 0xf0, 0x38, 0x74, 0x61, 0xd7, 0xf2, 0x26, 0x22, 0x36, 0xec, 0x9f, 0xc1, 0xbd, 0x13,
	0x6a, 0xd8, 0x7c, 0xbd, 0x5f, 0x1f, 0x03, 0x54, 0x99, 0xe9, 0xbe, 0x87, 0xe9, 0x1f, 0x6c, 0xac,
	0x3f, 0x58, 0x21, 0xfa, 0x5f, 0xc1, 0xde, 0xa9, 0xbd, 0xb0, 0x80, 0x47, 0x42, 0x1b, 0x75, 0x89,
	0x5a, 0x5d, 0xa8, 0x89, 0xb0, 0xc8, 0xbe, 0x26, 0x42, 0xf2, 0x09, 0xb4, 0x95, 0x8b, 0xa3, 0xb3,
	0x0b, 0x4f, 0x11, 0xe7, 0x0e, 0xdc, 0x7e, 0x9e, 0x27, 0x09, 0x55, 0x97, 0xc1, 0x35, 0x9e, 0xff,
	0x25, 0xf4, 0x30, 0xfa, 0x54, 0xb1, 0xb9, 0x58, 0xf0, 0x8d, 0xda, 0xc7, 0x00, 0x22, 0xd5, 0x19,
	0x67, 0xb7, 0x28, 0x9f, 0xba, 0x60, 0xb0, 0xc2, 0xf2, 0xdf, 0x78, 0x85, 0xf0, 0x84, 0x1a, 0x1a,
	0xcb, 0x68, 0xa3, 0x70, 0x39, 0x40, 0xb5, 0xdb, 0x06, 0xa8, 0x7e, 0x73, 0x80, 0x06, 0xd0, 0x28,
	0xaf, 0xaa, 0x18, 0xe6, 0x6a, 0x4d, 0xfa, 0xb0, 0xab, 0xf3, 0xd9, 0x37, 0x9c, 0x95, 0x53, 0x5c,
	0x2e, 0x97, 0xe6, 0xda, 0xb9, 0xdd, 0x5c, 0xbb, 0x6f, 0x35, 0x57, 0x63, 0xdd, 0x5c, 0xfe, 0xcf,
	0x1e, 0xb4, 0xcf, 0x39, 0x55, 0x6c, 0x1e, 0x70, 0x9d, 0xc7, 0xa6, 0x10, 0x55, 0x53, 0x26, 0xf3,
	0xd4, 0x60, 0xa9, 0x4e, 0x54, 0x4d, 0x2c, 0x40, 0xde, 0x85, 0x96, 0xd0, 0x53, 0x79, 0x71, 0x21,
	0x98, 0xa0, 0x31, 0x16, 0xde, 0x08, 0x40, 0xe8, 0xb3, 0x02, 0xa9, 0x5a, 0x52, 0x5f, 0x69, 0xc9,
	0x43, 0x68, 0x0b, 0x3d, 0xa5, 0xb9, 0x91, 0x09, 0x35, 0xdc, 0xb9, 0xb8, 0x11, 0xb4, 0x84, 0x7e,
	0x5a, 0x42, 0xe4, 0x10, 0x5a, 0x21, 0xd7, 0x4c, 0x89, 0x0c, 0xef, 0xc8, 0xd5, 0xbf, 0x0a, 0x1d,
	0xff, 0x56, 0x77, 0x2f, 0xfa, 0xb9, 0xfb, 0x36, 0x90, 0x13, 0xd8, 0xb2, 0x4b, 0x72, 0xc7, 0x0e,
	0xe0, 0xca, 0x53, 0x3f, 0xb8, 0x09, 0xf8, 0xfd, 0x1f, 0xfe, 0x7a, 0xf3, 0x63, 0x8d, 0x90, 0xde,
	0x78, 0xf1, 0x78, 0xcc, 0xd9, 0x5c, 0x8e, 0xbf, 0xc3, 0xe7, 0xff, 0x7b, 0xf2, 0x1c, 0x9a, 0xf6,
	0x01, 0xc3, 0x7b, 0x26, 0x64, 0x69, 0xc4, 0xf2, 0x55, 0x1b, 0x6c, 0xc0, 0xfc, 0x7d, 0x94, 0xeb,
	0xf8, 0x0d, 0x2b, 0x97, 0xe5, 0x71, 0xfc, 0xc4, 0xfb, 0x90, 0x9c, 0x41, 0x3b, 0xc8, 0xd3, 0x49,
	0xf9, 0x46, 0x92, 0x75, 0x57, 0x0f, 0xd6, 0x21, 0xff, 0x3e, 0x4a, 0xed, 0xfb, 0x5d, 0x2b, 0x55,
	0x3d, 0xb0, 0xda, 0x0a, 0x7e, 0x0d, 0xfb, 0x95, 0xab, 0x2a, 0x59, 0x4d, 0x36, 0xdb, 0x6d, 0xb0,
	0x19, 0xbe, 0xae, 0xbf, 0x74, 0xa4, 0xd5, 0x9f, 0xc1, 0xc1, 0x17, 0x5c, 0x25, 0x22, 0x45, 0x1b,
	0xfd, 0xe7, 0x13, 0xfe, 0x8f, 0x27, 0x1c, 0xf8, 0xd8, 0x5b, 0xb3, 0x14, 0xb4, 0x67, 0x9c, 0xf4,
	0xfe, 0xb8, 0x1a, 0x7a, 0x7f, 0x5e, 0x0d, 0xbd, 0xbf, 0xaf, 0x86, 0xde, 0x4f, 0xff, 0x0c, 0xff,
	0x37, 0xdb, 0xc1, 0x8f, 0xf3, 0x47, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x13, 0x5d, 0x86, 0xff,
	0xe5, 0x07, 0x00, 0x00,
}
